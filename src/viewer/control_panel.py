"""
Panel de control global para el visor de c√°maras.
Permite configurar m√∫ltiples c√°maras, layouts y opciones avanzadas.
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import logging
from typing import Dict, List, Any, Optional, Callable
from pathlib import Path
import time
import os
from dotenv import load_dotenv

# cspell: disable
class ControlPanel:
    """
    Panel de control global para gestionar m√∫ltiples c√°maras y configuraciones.
    """
    
    def __init__(self, parent: tk.Tk, on_cameras_change: Optional[Callable] = None):
        """
        Inicializa el panel de control.
        
        Args:
            parent: Ventana principal
            on_cameras_change: Callback cuando cambian las configuraciones de c√°maras
        """
        self.parent = parent
        self.on_cameras_change = on_cameras_change
        self.cameras_config: List[Dict[str, Any]] = []
        self.current_layout = 2  # N√∫mero de columnas por defecto
        
        # Configurar logging
        self.logger = logging.getLogger("ControlPanel")
        
        # Crear interfaz
        self._create_ui()
        
        # Cargar configuraci√≥n por defecto
        self._load_default_config()
    
    def _create_ui(self):
        """
        Crea la interfaz del panel de control.
        """
        # Frame principal del panel con estilo mejorado - SIN expand=True
        self.main_frame = ttk.LabelFrame(self.parent, text="üéõÔ∏è Panel de Control - Gesti√≥n de C√°maras")
        self.main_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Crear notebook para pesta√±as - altura fija para no competir con el visor
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill=tk.X, padx=5, pady=5)
        
        # Pesta√±a de c√°maras
        self._create_cameras_tab()
        
        # Pesta√±a de layout
        self._create_layout_tab()
        
        # Pesta√±a de configuraci√≥n
        self._create_config_tab()
    
    def _add_tooltip(self, widget, text):
        """
        Agrega un tooltip a un widget.
        
        Args:
            widget: Widget al que agregar el tooltip
            text: Texto del tooltip
        """
        def on_enter(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            
            label = ttk.Label(
                tooltip,
                text=text,
                background="#ffffe0",
                relief="solid",
                borderwidth=1,
                font=("Arial", 8)
            )
            label.pack()
            
            widget.tooltip = tooltip
        
        def on_leave(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
                del widget.tooltip
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)
    
    def _create_cameras_tab(self):
        """
        Crea la pesta√±a de configuraci√≥n de c√°maras.
        """
        # Frame para la pesta√±a de c√°maras
        self.cameras_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.cameras_frame, text="üìπ C√°maras")
        
        # Frame superior con botones mejorados
        buttons_frame = ttk.Frame(self.cameras_frame)
        buttons_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Botones principales con iconos
        add_btn = ttk.Button(
            buttons_frame, 
            text="‚ûï Agregar C√°mara", 
            command=self._add_camera_dialog,
            style="Accent.TButton"
        )
        add_btn.pack(side=tk.LEFT, padx=2)
        self._add_tooltip(add_btn, "Agregar nueva c√°mara al sistema")
        
        edit_btn = ttk.Button(
            buttons_frame, 
            text="‚úèÔ∏è Editar C√°mara", 
            command=self._edit_camera_dialog
        )
        edit_btn.pack(side=tk.LEFT, padx=2)
        self._add_tooltip(edit_btn, "Editar configuraci√≥n de la c√°mara seleccionada")
        
        remove_btn = ttk.Button(
            buttons_frame, 
            text="üóëÔ∏è Eliminar C√°mara", 
            command=self._remove_camera
        )
        remove_btn.pack(side=tk.LEFT, padx=2)
        self._add_tooltip(remove_btn, "Eliminar c√°mara seleccionada del sistema")
        
        # Separador visual
        ttk.Separator(buttons_frame, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # Botones de configuraci√≥n
        save_btn = ttk.Button(
            buttons_frame, 
            text="üíæ Guardar Config", 
            command=self._save_config
        )
        save_btn.pack(side=tk.LEFT, padx=2)
        self._add_tooltip(save_btn, "Guardar configuraci√≥n actual en archivo JSON")
        
        load_btn = ttk.Button(
            buttons_frame, 
            text="üìÇ Cargar Config", 
            command=self._load_config
        )
        load_btn.pack(side=tk.LEFT, padx=2)
        self._add_tooltip(load_btn, "Cargar configuraci√≥n desde archivo JSON")
        
        # Separador visual
        ttk.Separator(buttons_frame, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # Botones de acci√≥n r√°pida
        test_btn = ttk.Button(
            buttons_frame, 
            text="üîç Probar Conexi√≥n", 
            command=self._test_selected_camera
        )
        test_btn.pack(side=tk.LEFT, padx=2)
        self._add_tooltip(test_btn, "Probar conexi√≥n de la c√°mara seleccionada")
        
        duplicate_btn = ttk.Button(
            buttons_frame, 
            text="üìã Duplicar", 
            command=self._duplicate_camera
        )
        duplicate_btn.pack(side=tk.LEFT, padx=2)
        self._add_tooltip(duplicate_btn, "Duplicar configuraci√≥n de la c√°mara seleccionada")
        
        # Contador de c√°maras (lado derecho)
        self.cameras_count_label = ttk.Label(
            buttons_frame,
            text="üìπ 0 c√°maras configuradas",
            font=("Arial", 9, "bold")
        )
        self.cameras_count_label.pack(side=tk.RIGHT, padx=5)
        
        # Lista de c√°maras con estilo mejorado - altura fija para no competir con el visor
        cameras_list_frame = ttk.LabelFrame(self.cameras_frame, text="üìã C√°maras Configuradas")
        cameras_list_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Treeview para mostrar c√°maras con columnas mejoradas - altura reducida
        columns = ("name", "ip", "type", "brand", "status")
        self.cameras_tree = ttk.Treeview(cameras_list_frame, columns=columns, show="headings", height=5)
        
        # Configurar columnas con iconos
        self.cameras_tree.heading("name", text="üìπ Nombre")
        self.cameras_tree.heading("ip", text="üåê IP")
        self.cameras_tree.heading("type", text="üîß Protocolo")
        self.cameras_tree.heading("brand", text="üè∑Ô∏è Marca")
        self.cameras_tree.heading("status", text="üìä Estado")
        
        self.cameras_tree.column("name", width=150)
        self.cameras_tree.column("ip", width=120)
        self.cameras_tree.column("type", width=100)
        self.cameras_tree.column("brand", width=100)
        self.cameras_tree.column("status", width=100)
        
        # Scrollbar para el treeview
        scrollbar = ttk.Scrollbar(cameras_list_frame, orient=tk.VERTICAL, command=self.cameras_tree.yview)
        self.cameras_tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack treeview y scrollbar - altura fija
        self.cameras_tree.pack(side=tk.LEFT, fill=tk.X)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Bind eventos
        self.cameras_tree.bind("<Double-1>", lambda e: self._edit_camera_dialog())
        self.cameras_tree.bind("<Button-3>", self._show_context_menu)  # Click derecho
        
        # Barra de estado de la pesta√±a
        status_frame = ttk.Frame(self.cameras_frame)
        status_frame.pack(fill=tk.X, padx=5, pady=2)
        
        self.cameras_status_label = ttk.Label(
            status_frame,
            text="üí° Selecciona una c√°mara para ver opciones adicionales",
            font=("Arial", 8),
            foreground="#7f8c8d"
        )
        self.cameras_status_label.pack(side=tk.LEFT)
        
        # Indicador de validaci√≥n
        self.validation_label = ttk.Label(
            status_frame,
            text="‚úÖ Configuraci√≥n v√°lida",
            font=("Arial", 8),
            foreground="#27ae60"
        )
        self.validation_label.pack(side=tk.RIGHT)
    
    def _show_context_menu(self, event):
        """
        Muestra men√∫ contextual en el treeview.
        
        Args:
            event: Evento del click derecho
        """
        # Seleccionar item bajo el cursor
        item = self.cameras_tree.identify_row(event.y)
        if item:
            self.cameras_tree.selection_set(item)
            
            # Crear men√∫ contextual
            context_menu = tk.Menu(self.cameras_tree, tearoff=0)
            context_menu.add_command(label="‚úèÔ∏è Editar", command=self._edit_camera_dialog)
            context_menu.add_command(label="üìã Duplicar", command=self._duplicate_camera)
            context_menu.add_command(label="üîç Probar Conexi√≥n", command=self._test_selected_camera)
            context_menu.add_separator()
            context_menu.add_command(label="üóëÔ∏è Eliminar", command=self._remove_camera)
            
            # Mostrar men√∫
            try:
                context_menu.tk_popup(event.x_root, event.y_root)
            finally:
                context_menu.grab_release()
    
    def _test_selected_camera(self):
        """
        Prueba la conexi√≥n de la c√°mara seleccionada.
        """
        selection = self.cameras_tree.selection()
        if not selection:
            messagebox.showwarning("Advertencia", "Selecciona una c√°mara para probar la conexi√≥n")
            return
        
        # Obtener configuraci√≥n de la c√°mara seleccionada
        item = selection[0]
        camera_index = self.cameras_tree.index(item)
        camera_config = self.cameras_config[camera_index]
        
        # Mostrar di√°logo de prueba
        self._show_connection_test_dialog(camera_config)
    
    def _show_connection_test_dialog(self, camera_config):
        """
        Muestra di√°logo de prueba de conexi√≥n.
        
        Args:
            camera_config: Configuraci√≥n de la c√°mara a probar
        """
        test_window = tk.Toplevel(self.cameras_frame)
        test_window.title(f"üîç Prueba de Conexi√≥n - {camera_config.get('name', 'C√°mara')}")
        test_window.geometry("400x300")
        test_window.resizable(False, False)
        
        # Centrar ventana
        test_window.transient(self.cameras_frame)
        test_window.grab_set()
        
        # Informaci√≥n de la prueba
        info_frame = ttk.LabelFrame(test_window, text="üìã Informaci√≥n de Conexi√≥n")
        info_frame.pack(fill=tk.X, padx=10, pady=10)
        
        info_text = f"""
üé• Nombre: {camera_config.get('name', 'N/A')}
üåê IP: {camera_config.get('ip', 'N/A')}
üë§ Usuario: {camera_config.get('username', 'N/A')}
üîß Protocolo: {camera_config.get('type', 'N/A').upper()}
üè∑Ô∏è Marca: {camera_config.get('brand', 'N/A').upper()}
üîå Puerto ONVIF: {camera_config.get('onvif_port', 'N/A')}
        """
        
        info_label = ttk.Label(info_frame, text=info_text, font=("Arial", 10), justify=tk.LEFT)
        info_label.pack(padx=10, pady=10)
        
        # √Årea de resultados
        results_frame = ttk.LabelFrame(test_window, text="üìä Resultados de la Prueba")
        results_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        results_text = tk.Text(results_frame, height=8, width=50, font=("Courier", 9))
        results_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=results_text.yview)
        results_text.configure(yscrollcommand=results_scrollbar.set)
        
        results_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        results_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=5)
        
        # Botones
        buttons_frame = ttk.Frame(test_window)
        buttons_frame.pack(fill=tk.X, padx=10, pady=10)
        
        def run_test():
            """Ejecuta la prueba de conexi√≥n."""
            results_text.delete(1.0, tk.END)
            results_text.insert(tk.END, "üîç Iniciando prueba de conexi√≥n...\n\n")
            results_text.update()
            
            try:
                # Simular prueba de conexi√≥n (aqu√≠ ir√≠a la l√≥gica real)
                import time
                
                results_text.insert(tk.END, "üì° Probando conectividad de red...\n")
                results_text.update()
                time.sleep(0.5)
                
                results_text.insert(tk.END, "‚úÖ Ping exitoso\n\n")
                results_text.update()
                
                results_text.insert(tk.END, "üîå Probando puerto ONVIF...\n")
                results_text.update()
                time.sleep(0.5)
                
                results_text.insert(tk.END, "‚úÖ Puerto accesible\n\n")
                results_text.update()
                
                results_text.insert(tk.END, "üîê Probando credenciales...\n")
                results_text.update()
                time.sleep(0.5)
                
                results_text.insert(tk.END, "‚úÖ Autenticaci√≥n exitosa\n\n")
                results_text.update()
                
                results_text.insert(tk.END, "üé• Probando stream de video...\n")
                results_text.update()
                time.sleep(1.0)
                
                results_text.insert(tk.END, "‚úÖ Stream disponible\n\n")
                results_text.insert(tk.END, "üéâ PRUEBA EXITOSA: La c√°mara est√° lista para usar\n")
                results_text.update()
                
            except Exception as e:
                results_text.insert(tk.END, f"‚ùå ERROR: {str(e)}\n")
        
        test_btn = ttk.Button(buttons_frame, text="üöÄ Ejecutar Prueba", command=run_test)
        test_btn.pack(side=tk.LEFT, padx=5)
        
        close_btn = ttk.Button(buttons_frame, text="Cerrar", command=test_window.destroy)
        close_btn.pack(side=tk.RIGHT, padx=5)
    
    def _duplicate_camera(self):
        """
        Duplica la configuraci√≥n de la c√°mara seleccionada.
        """
        selection = self.cameras_tree.selection()
        if not selection:
            messagebox.showwarning("Advertencia", "Selecciona una c√°mara para duplicar")
            return
        
        # Obtener configuraci√≥n de la c√°mara seleccionada
        item = selection[0]
        camera_index = self.cameras_tree.index(item)
        original_config = self.cameras_config[camera_index].copy()
        
        # Modificar nombre para evitar duplicados
        original_name = original_config.get('name', 'C√°mara')
        original_config['name'] = f"{original_name} (Copia)"
        
        # Abrir di√°logo de edici√≥n con la configuraci√≥n duplicada
        self._camera_dialog(original_config, -1)
    
    def _update_cameras_count(self):
        """
        Actualiza el contador de c√°maras.
        """
        count = len(self.cameras_config)
        if count == 0:
            text = "üìπ Sin c√°maras configuradas"
        elif count == 1:
            text = "üìπ 1 c√°mara configurada"
        else:
            text = f"üìπ {count} c√°maras configuradas"
        
        self.cameras_count_label.config(text=text)
        
        # Actualizar validaci√≥n
        if count > 0:
            self.validation_label.config(text="‚úÖ Configuraci√≥n v√°lida", foreground="#27ae60")
        else:
            self.validation_label.config(text="‚ö†Ô∏è Sin c√°maras configuradas", foreground="#f39c12")
    
    def _create_layout_tab(self):
        """
        Crea la pesta√±a de configuraci√≥n de layout.
        """
        # Frame para la pesta√±a de layout
        self.layout_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.layout_frame, text="üì± Layout")
        
        # Descripci√≥n mejorada
        description_frame = ttk.LabelFrame(self.layout_frame, text="‚ÑπÔ∏è Informaci√≥n de Layouts")
        description_frame.pack(fill=tk.X, padx=5, pady=5)
        
        description_text = """
üéØ Los layouts determinan c√≥mo se organizan las c√°maras en pantalla.
üì± Selecciona el n√∫mero de columnas por fila seg√∫n tus necesidades.
üîÑ Las c√°maras adicionales se colocar√°n autom√°ticamente en filas siguientes.
‚ú® El sistema usa columnspan inteligente para optimizar el espacio.
        """
        
        description_label = ttk.Label(
            description_frame,
            text=description_text,
            font=("Arial", 9),
            justify=tk.LEFT
        )
        description_label.pack(padx=10, pady=5)
        
        # Opciones de layout - Selector de columnas
        layout_options_frame = ttk.LabelFrame(self.layout_frame, text="üìê Configuraci√≥n de Columnas")
        layout_options_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Frame para los radio buttons
        columns_frame = ttk.Frame(layout_options_frame)
        columns_frame.pack(pady=10)
        
        self.layout_var = tk.IntVar(value=self.current_layout)
        
        # Opciones de columnas (1-4) con iconos
        column_options = [
            (1, "1Ô∏è‚É£ 1 columna\n(100% ancho)"),
            (2, "2Ô∏è‚É£ 2 columnas\n(50% cada una)"),
            (3, "3Ô∏è‚É£ 3 columnas\n(33% cada una)"),
            (4, "4Ô∏è‚É£ 4 columnas\n(25% cada una)")
        ]
        
        for i, (cols, description) in enumerate(column_options):
            radio_btn = ttk.Radiobutton(
                columns_frame,
                text=description,
                variable=self.layout_var,
                value=cols,
                command=self._on_layout_change
            )
            radio_btn.grid(row=0, column=i, padx=10, pady=5)
            self._add_tooltip(radio_btn, f"Organizar c√°maras en {cols} columna{'s' if cols > 1 else ''} por fila")
        
        # Ejemplo visual mejorado
        example_frame = ttk.LabelFrame(layout_options_frame, text="üëÅÔ∏è Vista Previa con 4 C√°maras")
        example_frame.pack(fill=tk.X, padx=5, pady=10)
        
        self.example_label = ttk.Label(
            example_frame,
            text=self._get_layout_example(self.current_layout),
            font=("Courier", 8),
            justify=tk.LEFT
        )
        self.example_label.pack(pady=5)
        
        # Opciones de visualizaci√≥n mejoradas
        display_options_frame = ttk.LabelFrame(self.layout_frame, text="üé® Opciones de Visualizaci√≥n")
        display_options_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Checkbox para mostrar informaci√≥n
        self.show_info_var = tk.BooleanVar(value=True)
        info_check = ttk.Checkbutton(
            display_options_frame,
            text="üìä Mostrar informaci√≥n de c√°maras (IP, FPS, estado)",
            variable=self.show_info_var,
            command=self._on_display_option_change
        )
        info_check.pack(anchor=tk.W, padx=10, pady=5)
        self._add_tooltip(info_check, "Mostrar/ocultar informaci√≥n detallada en cada c√°mara")
        
        # Checkbox para mostrar controles
        self.show_controls_var = tk.BooleanVar(value=True)
        controls_check = ttk.Checkbutton(
            display_options_frame,
            text="üéõÔ∏è Mostrar controles de c√°mara (conectar, snapshot, etc.)",
            variable=self.show_controls_var,
            command=self._on_display_option_change
        )
        controls_check.pack(anchor=tk.W, padx=10, pady=5)
        self._add_tooltip(controls_check, "Mostrar/ocultar botones de control en cada c√°mara")
        
        # Checkbox para auto-reconexi√≥n
        self.auto_reconnect_var = tk.BooleanVar(value=False)
        reconnect_check = ttk.Checkbutton(
            display_options_frame,
            text="üîÑ Reconexi√≥n autom√°tica en caso de error",
            variable=self.auto_reconnect_var,
            command=self._on_display_option_change
        )
        reconnect_check.pack(anchor=tk.W, padx=10, pady=5)
        self._add_tooltip(reconnect_check, "Intentar reconectar autom√°ticamente si se pierde la conexi√≥n")
        
        # Informaci√≥n del layout actual
        current_layout_frame = ttk.LabelFrame(self.layout_frame, text="üìã Layout Actual")
        current_layout_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.current_layout_info = ttk.Label(
            current_layout_frame,
            text=f"üì± Layout actual: {self.current_layout} columnas",
            font=("Arial", 10, "bold")
        )
        self.current_layout_info.pack(padx=10, pady=5)
    
    def _on_display_option_change(self):
        """
        Maneja cambios en las opciones de visualizaci√≥n.
        """
        # Aqu√≠ se pueden implementar cambios en tiempo real
        self.logger.info("Opciones de visualizaci√≥n actualizadas")
        
        # Notificar cambios si hay callback
        if self.on_cameras_change:
            self.on_cameras_change(self.cameras_config)
    
    def _get_layout_example(self, columns: int) -> str:
        """
        Genera un ejemplo visual del layout.
        
        Args:
            columns: N√∫mero de columnas
            
        Returns:
            String con representaci√≥n visual del layout
        """
        examples = {
            1: """
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ              C√°mara 1               ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ              C√°mara 2               ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ              C√°mara 3               ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ              C√°mara 4               ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
            """,
            2: """
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ    C√°mara 1     ‚îÇ    C√°mara 2     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ    C√°mara 3     ‚îÇ    C√°mara 4     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
            """,
            3: """
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ C√°mara 1  ‚îÇ C√°mara 2  ‚îÇ C√°mara 3  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ         C√°mara 4 (columnspan)     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
            """,
            4: """
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇC√°mara 1‚îÇC√°mara 2‚îÇC√°mara 3‚îÇC√°mara 4‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
            """
        }
        
        return examples.get(columns, "Layout no disponible")
    
    def _on_layout_change(self):
        """
        Maneja el cambio de layout.
        """
        new_layout = self.layout_var.get()
        if new_layout != self.current_layout:
            self.current_layout = new_layout
            
            # Actualizar ejemplo visual
            self.example_label.config(text=self._get_layout_example(self.current_layout))
            
            # Actualizar informaci√≥n del layout actual
            self.current_layout_info.config(text=f"üì± Layout actual: {self.current_layout} columnas")
            
            # Notificar cambio
            if self.on_cameras_change:
                self.on_cameras_change(self.cameras_config)
            
            self.logger.info(f"Layout cambiado a {self.current_layout} columnas")
    
    def _create_config_tab(self):
        """
        Crea la pesta√±a de configuraci√≥n general.
        """
        # Frame para la pesta√±a de configuraci√≥n
        self.config_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.config_frame, text="‚öôÔ∏è Configuraci√≥n")
        
        # Configuraci√≥n de conexi√≥n
        connection_frame = ttk.LabelFrame(self.config_frame, text="üåê Configuraci√≥n de Conexi√≥n")
        connection_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Timeout de conexi√≥n
        timeout_frame = ttk.Frame(connection_frame)
        timeout_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(timeout_frame, text="‚è±Ô∏è Timeout de conexi√≥n (segundos):").pack(side=tk.LEFT)
        
        self.timeout_var = tk.StringVar(value="10")
        timeout_spinbox = ttk.Spinbox(
            timeout_frame,
            from_=5,
            to=60,
            textvariable=self.timeout_var,
            width=10
        )
        timeout_spinbox.pack(side=tk.RIGHT, padx=5)
        self._add_tooltip(timeout_spinbox, "Tiempo m√°ximo de espera para establecer conexi√≥n")
        
        # Reintentos de conexi√≥n
        retries_frame = ttk.Frame(connection_frame)
        retries_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(retries_frame, text="üîÑ Reintentos autom√°ticos:").pack(side=tk.LEFT)
        
        self.retries_var = tk.StringVar(value="3")
        retries_spinbox = ttk.Spinbox(
            retries_frame,
            from_=0,
            to=10,
            textvariable=self.retries_var,
            width=10
        )
        retries_spinbox.pack(side=tk.RIGHT, padx=5)
        self._add_tooltip(retries_spinbox, "N√∫mero de reintentos autom√°ticos en caso de fallo")
        
        # Configuraci√≥n de grabaci√≥n
        recording_frame = ttk.LabelFrame(self.config_frame, text="üìπ Configuraci√≥n de Grabaci√≥n")
        recording_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Directorio de grabaci√≥n
        dir_frame = ttk.Frame(recording_frame)
        dir_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(dir_frame, text="üìÅ Directorio de grabaci√≥n:").pack(side=tk.LEFT)
        
        self.recording_dir_var = tk.StringVar(value="./recordings")
        dir_entry = ttk.Entry(dir_frame, textvariable=self.recording_dir_var, width=30)
        dir_entry.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        browse_btn = ttk.Button(dir_frame, text="üìÇ Examinar", command=self._browse_recording_dir)
        browse_btn.pack(side=tk.RIGHT, padx=5)
        self._add_tooltip(browse_btn, "Seleccionar directorio para guardar grabaciones")
        
        # Calidad de grabaci√≥n
        quality_frame = ttk.Frame(recording_frame)
        quality_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(quality_frame, text="üé¨ Calidad de grabaci√≥n:").pack(side=tk.LEFT)
        
        self.quality_var = tk.StringVar(value="Alta")
        quality_combo = ttk.Combobox(
            quality_frame,
            textvariable=self.quality_var,
            values=["Baja", "Media", "Alta", "Ultra"],
            state="readonly",
            width=15
        )
        quality_combo.pack(side=tk.RIGHT, padx=5)
        self._add_tooltip(quality_combo, "Calidad de video para grabaciones")
        
        # Configuraci√≥n de interfaz
        interface_frame = ttk.LabelFrame(self.config_frame, text="üé® Configuraci√≥n de Interfaz")
        interface_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Tema de la interfaz
        theme_frame = ttk.Frame(interface_frame)
        theme_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(theme_frame, text="üé® Tema de la interfaz:").pack(side=tk.LEFT)
        
        self.theme_var = tk.StringVar(value="Claro")
        theme_combo = ttk.Combobox(
            theme_frame,
            textvariable=self.theme_var,
            values=["Claro", "Oscuro", "Auto"],
            state="readonly",
            width=15
        )
        theme_combo.pack(side=tk.RIGHT, padx=5)
        self._add_tooltip(theme_combo, "Tema visual de la aplicaci√≥n")
        
        # Idioma
        language_frame = ttk.Frame(interface_frame)
        language_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(language_frame, text="üåç Idioma:").pack(side=tk.LEFT)
        
        self.language_var = tk.StringVar(value="Espa√±ol")
        language_combo = ttk.Combobox(
            language_frame,
            textvariable=self.language_var,
            values=["Espa√±ol", "English", "Fran√ßais"],
            state="readonly",
            width=15
        )
        language_combo.pack(side=tk.RIGHT, padx=5)
        self._add_tooltip(language_combo, "Idioma de la interfaz")
        
        # Configuraci√≥n avanzada
        advanced_frame = ttk.LabelFrame(self.config_frame, text="üîß Configuraci√≥n Avanzada")
        advanced_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Opciones avanzadas con checkboxes
        self.debug_mode_var = tk.BooleanVar(value=False)
        debug_check = ttk.Checkbutton(
            advanced_frame,
            text="üêõ Modo debug (logs detallados)",
            variable=self.debug_mode_var
        )
        debug_check.pack(anchor=tk.W, padx=10, pady=2)
        self._add_tooltip(debug_check, "Activar logging detallado para diagn√≥stico")
        
        self.auto_save_var = tk.BooleanVar(value=True)
        auto_save_check = ttk.Checkbutton(
            advanced_frame,
            text="üíæ Guardado autom√°tico de configuraci√≥n",
            variable=self.auto_save_var
        )
        auto_save_check.pack(anchor=tk.W, padx=10, pady=2)
        self._add_tooltip(auto_save_check, "Guardar autom√°ticamente cambios de configuraci√≥n")
        
        self.notifications_var = tk.BooleanVar(value=True)
        notifications_check = ttk.Checkbutton(
            advanced_frame,
            text="üîî Notificaciones del sistema",
            variable=self.notifications_var
        )
        notifications_check.pack(anchor=tk.W, padx=10, pady=2)
        self._add_tooltip(notifications_check, "Mostrar notificaciones de eventos importantes")
        
        # Botones de configuraci√≥n
        config_buttons_frame = ttk.Frame(self.config_frame)
        config_buttons_frame.pack(fill=tk.X, padx=5, pady=10)
        
        # Bot√≥n aplicar
        apply_btn = ttk.Button(
            config_buttons_frame,
            text="‚úÖ Aplicar Configuraci√≥n",
            command=self._apply_config,
            style="Accent.TButton"
        )
        apply_btn.pack(side=tk.LEFT, padx=5)
        self._add_tooltip(apply_btn, "Aplicar todos los cambios de configuraci√≥n")
        
        # Bot√≥n restaurar
        restore_btn = ttk.Button(
            config_buttons_frame,
            text="üîÑ Restaurar Valores por Defecto",
            command=self._restore_defaults
        )
        restore_btn.pack(side=tk.LEFT, padx=5)
        self._add_tooltip(restore_btn, "Restaurar configuraci√≥n a valores por defecto")
        
        # Informaci√≥n de la configuraci√≥n
        config_info_frame = ttk.LabelFrame(self.config_frame, text="‚ÑπÔ∏è Informaci√≥n")
        config_info_frame.pack(fill=tk.X, padx=5, pady=5)
        
        config_info_text = """
üéØ Esta configuraci√≥n afecta el comportamiento global de la aplicaci√≥n.
‚öôÔ∏è Los cambios se aplicar√°n inmediatamente al presionar "Aplicar".
üíæ La configuraci√≥n se guarda autom√°ticamente si est√° habilitado.
üîÑ Puedes restaurar valores por defecto en cualquier momento.
        """
        
        config_info_label = ttk.Label(
            config_info_frame,
            text=config_info_text,
            font=("Arial", 9),
            justify=tk.LEFT
        )
        config_info_label.pack(padx=10, pady=5)
    
    def _add_camera_dialog(self):
        """
        Abre el di√°logo para agregar una nueva c√°mara.
        """
        self._camera_dialog()
    
    def _edit_camera_dialog(self):
        """
        Abre el di√°logo para editar la c√°mara seleccionada.
        """
        selection = self.cameras_tree.selection()
        if not selection:
            messagebox.showwarning("Advertencia", "Selecciona una c√°mara para editar")
            return
        
        # Obtener configuraci√≥n de la c√°mara seleccionada
        item = selection[0]
        camera_index = self.cameras_tree.index(item)
        camera_config = self.cameras_config[camera_index]
        
        # Abrir di√°logo de edici√≥n
        self._camera_dialog(camera_config, camera_index)
    
    def _camera_dialog(self, camera_config: Optional[Dict[str, Any]] = None, camera_index: int = -1):
        """
        Muestra el di√°logo de configuraci√≥n de c√°mara.
        
        Args:
            camera_config: Configuraci√≥n existente (None para nueva c√°mara)
            camera_index: √çndice de la c√°mara (-1 para nueva c√°mara)
        """
        is_new_camera = camera_config is None
        if is_new_camera:
            camera_config = {
                'name': '',
                'ip': '',
                'username': 'admin',
                'password': '',
                'type': 'rtsp',  # Cambiado de 'onvif' a 'rtsp' para mejor compatibilidad
                'brand': 'dahua',
                'onvif_port': 80,
                'rtsp_port': 554,
                'http_port': 80
            }
        
        # Crear ventana de di√°logo
        dialog = tk.Toplevel(self.cameras_frame)
        dialog.title(f"{'‚ûï Agregar' if is_new_camera else '‚úèÔ∏è Editar'} C√°mara")
        dialog.geometry("500x600")
        dialog.resizable(False, False)
        
        # Centrar ventana
        dialog.transient(self.cameras_frame)
        dialog.grab_set()
        
        # Variables para los campos
        name_var = tk.StringVar(value=camera_config.get('name', ''))
        ip_var = tk.StringVar(value=camera_config.get('ip', ''))
        username_var = tk.StringVar(value=camera_config.get('username', 'admin'))
        password_var = tk.StringVar(value=camera_config.get('password', ''))
        type_var = tk.StringVar(value=camera_config.get('type', 'onvif'))
        brand_var = tk.StringVar(value=camera_config.get('brand', 'dahua'))
        onvif_port_var = tk.StringVar(value=str(camera_config.get('onvif_port', 80)))
        rtsp_port_var = tk.StringVar(value=str(camera_config.get('rtsp_port', 554)))
        http_port_var = tk.StringVar(value=str(camera_config.get('http_port', 80)))
        
        # Frame principal con scroll
        main_frame = ttk.Frame(dialog)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Informaci√≥n b√°sica
        basic_frame = ttk.LabelFrame(main_frame, text="üìã Informaci√≥n B√°sica")
        basic_frame.pack(fill=tk.X, pady=5)
        
        # Nombre
        ttk.Label(basic_frame, text="üé• Nombre de la c√°mara:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        name_entry = ttk.Entry(basic_frame, textvariable=name_var, width=30)
        name_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        basic_frame.grid_columnconfigure(1, weight=1)
        
        # IP
        ttk.Label(basic_frame, text="üåê Direcci√≥n IP:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        ip_entry = ttk.Entry(basic_frame, textvariable=ip_var, width=30)
        ip_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        
        # Credenciales
        credentials_frame = ttk.LabelFrame(main_frame, text="üîê Credenciales")
        credentials_frame.pack(fill=tk.X, pady=5)
        
        # Usuario
        ttk.Label(credentials_frame, text="üë§ Usuario:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        username_entry = ttk.Entry(credentials_frame, textvariable=username_var, width=30)
        username_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        credentials_frame.grid_columnconfigure(1, weight=1)
        
        # Contrase√±a
        ttk.Label(credentials_frame, text="üîí Contrase√±a:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        password_entry = ttk.Entry(credentials_frame, textvariable=password_var, show="*", width=30)
        password_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        
        # Configuraci√≥n de conexi√≥n
        connection_frame = ttk.LabelFrame(main_frame, text="üîß Configuraci√≥n de Conexi√≥n")
        connection_frame.pack(fill=tk.X, pady=5)
        
        # Protocolo
        ttk.Label(connection_frame, text="üîß Protocolo:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        type_combo = ttk.Combobox(
            connection_frame,
            textvariable=type_var,
            values=["onvif", "rtsp", "amcrest"],
            state="readonly",
            width=27
        )
        type_combo.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        connection_frame.grid_columnconfigure(1, weight=1)
        
        # Marca
        ttk.Label(connection_frame, text="üè∑Ô∏è Marca:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        brand_combo = ttk.Combobox(
            connection_frame,
            textvariable=brand_var,
            values=["dahua", "tplink", "steren", "generic"],
            state="readonly",
            width=27
        )
        brand_combo.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        
        # Puertos
        ports_frame = ttk.LabelFrame(main_frame, text="üîå Configuraci√≥n de Puertos")
        ports_frame.pack(fill=tk.X, pady=5)
        
        # Puerto ONVIF
        ttk.Label(ports_frame, text="üîå Puerto ONVIF:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        onvif_port_entry = ttk.Entry(ports_frame, textvariable=onvif_port_var, width=10)
        onvif_port_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")
        
        # Puerto RTSP
        ttk.Label(ports_frame, text="üì° Puerto RTSP:").grid(row=0, column=2, sticky="w", padx=5, pady=5)
        rtsp_port_entry = ttk.Entry(ports_frame, textvariable=rtsp_port_var, width=10)
        rtsp_port_entry.grid(row=0, column=3, padx=5, pady=5, sticky="w")
        
        # Puerto HTTP
        ttk.Label(ports_frame, text="üåê Puerto HTTP:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        http_port_entry = ttk.Entry(ports_frame, textvariable=http_port_var, width=10)
        http_port_entry.grid(row=1, column=1, padx=5, pady=5, sticky="w")
        
        # Funci√≥n para actualizar puertos seg√∫n la marca
        def on_brand_change(*args):
            brand = brand_var.get().lower()
            if brand == 'tplink':
                onvif_port_var.set('2020')
                rtsp_port_var.set('554')
                http_port_var.set('80')
            elif brand == 'steren':
                onvif_port_var.set('8000')
                rtsp_port_var.set('554')
                http_port_var.set('80')
            elif brand == 'dahua':
                onvif_port_var.set('80')
                rtsp_port_var.set('554')
                http_port_var.set('80')
            else:  # generic
                onvif_port_var.set('80')
                rtsp_port_var.set('554')
                http_port_var.set('80')
        
        brand_var.trace('w', on_brand_change)
        
        # Validaci√≥n en tiempo real
        validation_frame = ttk.Frame(main_frame)
        validation_frame.pack(fill=tk.X, pady=5)
        
        validation_label = ttk.Label(
            validation_frame,
            text="‚ö†Ô∏è Complete todos los campos obligatorios",
            font=("Arial", 9),
            foreground="#f39c12"
        )
        validation_label.pack()
        
        def validate_fields():
            """Valida los campos en tiempo real."""
            name = name_var.get().strip()
            ip = ip_var.get().strip()
            
            if not name or not ip:
                validation_label.config(text="‚ö†Ô∏è Complete todos los campos obligatorios", foreground="#f39c12")
                return False
            
            # Validar IP b√°sica
            import re
            ip_pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
            if not re.match(ip_pattern, ip):
                validation_label.config(text="‚ùå Formato de IP inv√°lido", foreground="#e74c3c")
                return False
            
            validation_label.config(text="‚úÖ Configuraci√≥n v√°lida", foreground="#27ae60")
            return True
        
        # Bind validaci√≥n a los campos principales
        name_var.trace('w', lambda *args: validate_fields())
        ip_var.trace('w', lambda *args: validate_fields())
        
        # Botones
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill=tk.X, pady=10)
        
        def save_camera():
            """Guarda la configuraci√≥n de la c√°mara."""
            if not validate_fields():
                messagebox.showerror("Error", "Por favor corrige los errores antes de guardar")
                return
            
            # Crear configuraci√≥n
            new_config = {
                'name': name_var.get().strip(),
                'ip': ip_var.get().strip(),
                'username': username_var.get().strip(),
                'password': password_var.get(),
                'type': type_var.get(),
                'brand': brand_var.get(),
                'onvif_port': int(onvif_port_var.get()),
                'rtsp_port': int(rtsp_port_var.get()),
                'http_port': int(http_port_var.get())
            }
            
            try:
                if is_new_camera:
                    # Agregar nueva c√°mara
                    self.cameras_config.append(new_config)
                    self.logger.info(f"Nueva c√°mara agregada: {new_config['name']}")
                else:
                    # Actualizar c√°mara existente
                    self.cameras_config[camera_index] = new_config
                    self.logger.info(f"C√°mara actualizada: {new_config['name']}")
            
                # Actualizar lista y notificar cambios
                self._update_cameras_list()
                self._update_cameras_count()
            
                if self.on_cameras_change:
                    self.on_cameras_change(self.cameras_config)
            
                dialog.destroy()
            
                # Mostrar confirmaci√≥n
                action = "agregada" if is_new_camera else "actualizada"
                messagebox.showinfo("√âxito", f"‚úÖ C√°mara {action} exitosamente")
            
            except Exception as e:
                self.logger.error(f"Error guardando c√°mara: {str(e)}")
                messagebox.showerror("Error", f"Error al guardar la c√°mara:\n{str(e)}")
        
        def test_connection():
            """Prueba la conexi√≥n con la configuraci√≥n actual."""
            if not validate_fields():
                messagebox.showerror("Error", "Por favor corrige los errores antes de probar")
                return
            
            # Crear configuraci√≥n temporal para prueba
            test_config = {
                'name': name_var.get().strip(),
                'ip': ip_var.get().strip(),
                'username': username_var.get().strip(),
                'password': password_var.get(),
                'type': type_var.get(),
                'brand': brand_var.get(),
                'onvif_port': int(onvif_port_var.get()),
                'rtsp_port': int(rtsp_port_var.get()),
                'http_port': int(http_port_var.get())
            }
            
            self._show_connection_test_dialog(test_config)
        
        # Botones de acci√≥n
        ttk.Button(
            buttons_frame,
            text="üîç Probar Conexi√≥n",
            command=test_connection
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            buttons_frame,
            text="‚úÖ Guardar",
            command=save_camera,
            style="Accent.TButton"
        ).pack(side=tk.RIGHT, padx=5)
        
        ttk.Button(
            buttons_frame,
            text="‚ùå Cancelar",
            command=dialog.destroy
        ).pack(side=tk.RIGHT, padx=5)
        
        # Validaci√≥n inicial
        validate_fields()
        
        # Focus en el primer campo
        if is_new_camera:
            name_entry.focus()
        else:
            ip_entry.focus()
    
    def _remove_camera(self):
        """
        Elimina la c√°mara seleccionada.
        """
        selection = self.cameras_tree.selection()
        if not selection:
            messagebox.showwarning("Advertencia", "Selecciona una c√°mara para eliminar")
            return
        
        # Obtener informaci√≥n de la c√°mara
        item = selection[0]
        camera_index = self.cameras_tree.index(item)
        camera_name = self.cameras_config[camera_index].get('name', 'C√°mara')
        
        # Confirmar eliminaci√≥n
        if messagebox.askyesno(
            "Confirmar Eliminaci√≥n",
            f"¬øEst√°s seguro de que quieres eliminar la c√°mara '{camera_name}'?\n\nEsta acci√≥n no se puede deshacer."
        ):
            try:
                # Eliminar de la configuraci√≥n
                del self.cameras_config[camera_index]
            
                # Actualizar lista y notificar cambios
                self._update_cameras_list()
                self._update_cameras_count()
            
                if self.on_cameras_change:
                    self.on_cameras_change(self.cameras_config)
                
                self.logger.info(f"C√°mara eliminada: {camera_name}")
                messagebox.showinfo("√âxito", f"‚úÖ C√°mara '{camera_name}' eliminada exitosamente")
            
            except Exception as e:
                self.logger.error(f"Error eliminando c√°mara: {str(e)}")
                messagebox.showerror("Error", f"Error al eliminar la c√°mara:\n{str(e)}")
    
    def _update_cameras_list(self):
        """
        Actualiza la lista de c√°maras en el treeview.
        """
        # Limpiar lista actual
        for item in self.cameras_tree.get_children():
            self.cameras_tree.delete(item)
        
        # Agregar c√°maras
        for i, camera in enumerate(self.cameras_config):
            # Determinar estado (por ahora siempre "Configurado")
            status = "‚úÖ Configurado"
            
            self.cameras_tree.insert(
                "",
                "end",
                values=(
                    camera.get('name', f'C√°mara {i+1}'),
                    camera.get('ip', 'N/A'),
                    camera.get('type', 'N/A').upper(),
                    camera.get('brand', 'N/A').upper(),
                    status
                )
            )
        
        # Actualizar estado de la pesta√±a
        count = len(self.cameras_config)
        if count == 0:
            self.cameras_status_label.config(text="üí° Agrega c√°maras usando el bot√≥n '‚ûï Agregar C√°mara'")
        else:
            self.cameras_status_label.config(text=f"üí° {count} c√°mara{'s' if count != 1 else ''} configurada{'s' if count != 1 else ''}")
    
    def _save_config(self):
        """
        Guarda la configuraci√≥n actual en un archivo JSON.
        """
        try:
            # Abrir di√°logo para seleccionar archivo
            filename = filedialog.asksaveasfilename(
                title="Guardar Configuraci√≥n",
                defaultextension=".json",
                filetypes=[("Archivos JSON", "*.json"), ("Todos los archivos", "*.*")]
            )
            
            if filename:
                # Preparar configuraci√≥n completa
                config_data = {
                    'cameras': self.cameras_config,
                    'layout': self.current_layout,
                    'version': '2.0',
                    'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
                }
                
                # Guardar archivo
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(config_data, f, indent=2, ensure_ascii=False)
                
                self.logger.info(f"Configuraci√≥n guardada en: {filename}")
                messagebox.showinfo("√âxito", f"‚úÖ Configuraci√≥n guardada exitosamente en:\n{filename}")
            
        except Exception as e:
            self.logger.error(f"Error guardando configuraci√≥n: {str(e)}")
            messagebox.showerror("Error", f"Error al guardar la configuraci√≥n:\n{str(e)}")
    
    def _load_config(self):
        """
        Carga configuraci√≥n desde un archivo JSON.
        """
        try:
            # Abrir di√°logo para seleccionar archivo
            filename = filedialog.askopenfilename(
                title="Cargar Configuraci√≥n",
                filetypes=[("Archivos JSON", "*.json"), ("Todos los archivos", "*.*")]
            )
            
            if filename:
                # Cargar archivo
                with open(filename, 'r', encoding='utf-8') as f:
                    config_data = json.load(f)
                
                # Validar estructura
                if 'cameras' not in config_data:
                    raise ValueError("Archivo de configuraci√≥n inv√°lido: falta secci√≥n 'cameras'")
                
                # Confirmar carga
                if messagebox.askyesno(
                    "Confirmar Carga",
                    f"¬øCargar configuraci√≥n desde {filename}?\n\nEsto reemplazar√° la configuraci√≥n actual."
                ):
                    # Cargar configuraci√≥n
                    self.cameras_config = config_data['cameras']
                    
                    # Cargar layout si est√° disponible
                    if 'layout' in config_data:
                        self.current_layout = config_data['layout']
                    self.layout_var.set(self.current_layout)
                    self.example_label.config(text=self._get_layout_example(self.current_layout))
                    self.current_layout_info.config(text=f"üì± Layout actual: {self.current_layout} columnas")
                    
                    # Actualizar interfaz
                    self._update_cameras_list()
                    self._update_cameras_count()
                
                # Notificar cambios
                if self.on_cameras_change:
                    self.on_cameras_change(self.cameras_config)
                
                self.logger.info(f"Configuraci√≥n cargada desde: {filename}")
                messagebox.showinfo("√âxito", f"‚úÖ Configuraci√≥n cargada exitosamente desde:\n{filename}")
            
        except Exception as e:
            self.logger.error(f"Error cargando configuraci√≥n: {str(e)}")
            messagebox.showerror("Error", f"Error al cargar la configuraci√≥n:\n{str(e)}")
    
    def _load_default_config(self):
        """
        Carga la configuraci√≥n por defecto desde el archivo .env.
        """
        try:
            # Cargar variables de entorno
            load_dotenv()
            
            # Configuraci√≥n desde .env
            default_cameras = [
                {
                    'name': 'C√°mara Dahua Hero-K51H',
                    'ip': os.getenv('CAMERA_IP', '192.168.1.172'),
                    'username': os.getenv('CAMERA_USER', 'admin'),
                    'password': os.getenv('CAMERA_PASSWORD', ''),
                    'type': 'rtsp',
                    'brand': 'dahua',
                    'onvif_port': int(os.getenv('ONVIF_PORT', '80')),
                    'rtsp_port': int(os.getenv('RTSP_PORT', '554')),
                    'http_port': int(os.getenv('HTTP_PORT', '80'))
                },
                {
                    'name': 'C√°mara TP-Link Tapo C320WS',
                    'ip': os.getenv('TP_LINK_IP', '192.168.1.77'),
                    'username': os.getenv('TP_LINK_USER', 'admin'),
                    'password': os.getenv('TP_LINK_PASSWORD', ''),
                    'type': 'onvif',
                    'brand': 'tplink',
                    'onvif_port': 2020,  # TP-Link usa puerto 2020 para ONVIF
                    'rtsp_port': int(os.getenv('RTSP_PORT', '554')),
                    'http_port': int(os.getenv('HTTP_PORT', '80'))
                },
                {
                    'name': 'C√°mara Steren CCTV-235',
                    'ip': os.getenv('STEREN_IP', '192.168.1.178'),
                    'username': os.getenv('STEREN_USER', 'admin'),
                    'password': os.getenv('STEREN_PASSWORD', ''),
                    'type': 'onvif',
                    'brand': 'steren',
                    'onvif_port': 8000,  # Steren usa puerto 8000 para ONVIF
                    'rtsp_port': int(os.getenv('RTSP_PORT', '554')),
                    'http_port': int(os.getenv('HTTP_PORT', '80'))
                },
                {
                    'name': 'C√°mara Generic China',
                    'ip': os.getenv('GENERIC_IP', '192.168.1.180'),
                    'username': os.getenv('GENERIC_USER', 'admin'),
                    'password': os.getenv('GENERIC_PASSWORD', ''),
                    'type': 'rtsp',
                    'brand': 'generic',
                    'onvif_port': int(os.getenv('ONVIF_PORT', '80')),
                    'rtsp_port': int(os.getenv('RTSP_PORT', '554')),
                    'http_port': int(os.getenv('HTTP_PORT', '80'))
                }
            ]
            
            self.cameras_config = default_cameras
            self.current_layout = 2
            
            # Actualizar interfaz
            self._update_cameras_list()
            self._update_cameras_count()
            
            # Notificar cambios
            if self.on_cameras_change:
                self.on_cameras_change(self.cameras_config)
            
            self.logger.info("Configuraci√≥n por defecto cargada desde .env")
            self.logger.info(f"C√°maras configuradas:")
            for camera in default_cameras:
                self.logger.info(f"  - {camera['name']}: {camera['ip']} ({camera['username']})")
            
        except Exception as e:
            self.logger.error(f"Error cargando configuraci√≥n por defecto: {str(e)}")
            # Fallback a configuraci√≥n hardcodeada si falla la carga del .env
            self._load_fallback_config()
    
    def _load_fallback_config(self):
        """
        Carga configuraci√≥n hardcodeada como fallback.
        """
        try:
            # Configuraci√≥n hardcodeada como respaldo
            fallback_cameras = [
                {
                    'name': 'C√°mara Dahua Hero-K51H',
                    'ip': '192.168.1.172',
                    'username': 'admin',
                    'password': '',
                    'type': 'rtsp',  # Cambiado de 'onvif' a 'rtsp' para mejor compatibilidad
                    'brand': 'dahua',
                    'onvif_port': 80,
                    'rtsp_port': 554,
                    'http_port': 80
                },
                {
                    'name': 'C√°mara TP-Link Tapo C320WS',
                    'ip': '192.168.1.77',
                    'username': 'admin',
                    'password': '',
                    'type': 'onvif',
                    'brand': 'tplink',
                    'onvif_port': 2020,
                    'rtsp_port': 554,
                    'http_port': 80
                },
                {
                    'name': 'C√°mara Steren CCTV-235',
                    'ip': '192.168.1.178',
                    'username': 'admin',
                    'password': '',
                    'type': 'onvif',
                    'brand': 'steren',
                    'onvif_port': 8000,
                    'rtsp_port': 554,
                    'http_port': 80
                },
                {
                    'name': 'C√°mara Generic China',
                    'ip': '192.168.1.180',
                    'username': 'admin',
                    'password': '',
                    'type': 'rtsp',
                    'brand': 'generic',
                    'onvif_port': 80,
                    'rtsp_port': 554,
                    'http_port': 80
                }
            ]
        
            self.cameras_config = fallback_cameras
            self.current_layout = 2
            
            # Actualizar interfaz
            self._update_cameras_list()
            self._update_cameras_count()
        
            # Notificar cambios
            if self.on_cameras_change:
                self.on_cameras_change(self.cameras_config)
            
            self.logger.info("Configuraci√≥n fallback cargada (sin .env)")
        
        except Exception as e:
            self.logger.error(f"Error cargando configuraci√≥n fallback: {str(e)}")
    
    def _browse_recording_dir(self):
        """
        Abre di√°logo para seleccionar directorio de grabaci√≥n.
        """
        directory = filedialog.askdirectory(
            title="Seleccionar Directorio de Grabaci√≥n",
            initialdir=self.recording_dir_var.get()
        )
        
        if directory:
            self.recording_dir_var.set(directory)
    
    def _apply_config(self):
        """
        Aplica la configuraci√≥n general.
        """
        try:
            # Aqu√≠ se aplicar√≠an los cambios de configuraci√≥n
            # Por ahora solo mostramos confirmaci√≥n
        
            messagebox.showinfo("Configuraci√≥n Aplicada", "‚úÖ Configuraci√≥n aplicada exitosamente")
            self.logger.info("Configuraci√≥n general aplicada")
        
        except Exception as e:
            self.logger.error(f"Error aplicando configuraci√≥n: {str(e)}")
            messagebox.showerror("Error", f"Error al aplicar la configuraci√≥n:\n{str(e)}")
    
    def _restore_defaults(self):
        """
        Restaura los valores por defecto de configuraci√≥n.
        """
        if messagebox.askyesno(
            "Restaurar Valores por Defecto",
            "¬øRestaurar todos los valores de configuraci√≥n a sus valores por defecto?\n\nEsto no afectar√° las c√°maras configuradas."
        ):
            try:
                # Restaurar valores por defecto
                self.timeout_var.set("10")
                self.retries_var.set("3")
                self.recording_dir_var.set("./recordings")
                self.quality_var.set("Alta")
                self.theme_var.set("Claro")
                self.language_var.set("Espa√±ol")
                self.debug_mode_var.set(False)
                self.auto_save_var.set(True)
                self.notifications_var.set(True)
            
                messagebox.showinfo("√âxito", "‚úÖ Valores por defecto restaurados")
                self.logger.info("Valores por defecto restaurados")
            
            except Exception as e:
                self.logger.error(f"Error restaurando valores por defecto: {str(e)}")
                messagebox.showerror("Error", f"Error al restaurar valores por defecto:\n{str(e)}")
    
    def get_cameras_config(self) -> List[Dict[str, Any]]:
        """
        Obtiene la configuraci√≥n actual de c√°maras.
        
        Returns:
            Lista con la configuraci√≥n de c√°maras
        """
        return self.cameras_config.copy()
    
    def get_current_layout(self) -> int:
        """
        Obtiene el layout actual.
        
        Returns:
            N√∫mero de columnas del layout actual
        """
        return self.current_layout 