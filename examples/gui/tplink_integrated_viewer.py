"""
Visor integrado espec√≠fico para c√°maras TP-Link Tapo.
Combina el visor universal con optimizaciones espec√≠ficas para TP-Link.

Caracter√≠sticas incluidas:
- Interfaz optimizada para c√°maras Tapo
- Soporte RTSP y ONVIF autom√°tico
- Configuraci√≥n simplificada para modelos Tapo
- Panel de control espec√≠fico TP-Link
- Auto-detecci√≥n de URLs RTSP funcionales
- Snapshots y grabaci√≥n optimizada

Compatible con: TP-Link Tapo C520WS, C200, C210 y modelos similares
"""

import sys
import os
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import cv2
import threading
import time
import logging
from datetime import datetime
from pathlib import Path

# Agregar paths necesarios
sys.path.append(str(Path(__file__).parent.parent.parent))

try:
    from src.viewer.real_time_viewer import RealTimeViewer
    from src.connections import ConnectionFactory
    from src.utils.config import ConfigurationManager
    from dotenv import load_dotenv
    import requests
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos del proyecto: {e}")
    print("Aseg√∫rate de ejecutar desde la ra√≠z del proyecto")
    sys.exit(1)


def setup_logging():
    """Configura logging para el visor TP-Link."""
    logs_dir = Path(__file__).parent.parent / "logs"
    logs_dir.mkdir(exist_ok=True)
    
    log_file = logs_dir / "tplink_viewer.log"
    
    # Limpiar configuraci√≥n existente
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler(log_file, encoding='utf-8')
        ],
        force=True
    )
    
    print(f"üìù Logs guard√°ndose en: {log_file}")


class TPLinkControlPanel:
    """Panel de control espec√≠fico para c√°maras TP-Link Tapo."""
    
    def __init__(self, parent, on_connect_callback):
        self.parent = parent
        self.on_connect_callback = on_connect_callback
        self.logger = logging.getLogger("TPLinkPanel")
        
        # Variables de configuraci√≥n
        self.camera_ip = tk.StringVar(value="192.168.1.77")
        self.username = tk.StringVar(value="admin-tato")
        self.password = tk.StringVar()
        self.protocol = tk.StringVar(value="auto")
        self.connection_status = tk.StringVar(value="Desconectado")
        
        # Cargar configuraci√≥n desde .env
        self.load_env_config()
        
        self.setup_ui()
    
    def load_env_config(self):
        """Cargar configuraci√≥n desde archivo .env."""
        load_dotenv()
        
        if os.getenv('TP_LINK_IP'):
            self.camera_ip.set(os.getenv('TP_LINK_IP'))
        if os.getenv('TP_LINK_USER'):
            self.username.set(os.getenv('TP_LINK_USER'))
        if os.getenv('TP_LINK_PASSWORD'):
            self.password.set(os.getenv('TP_LINK_PASSWORD'))
    
    def setup_ui(self):
        """Configurar interfaz de usuario."""
        # Frame principal
        self.frame = ttk.LabelFrame(self.parent, text="üé• Control TP-Link Tapo", padding=10)
        self.frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Configuraci√≥n de conexi√≥n
        config_frame = ttk.LabelFrame(self.frame, text="Configuraci√≥n", padding=5)
        config_frame.pack(fill=tk.X, pady=(0, 5))
        
        # IP
        ttk.Label(config_frame, text="IP C√°mara:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        ip_entry = ttk.Entry(config_frame, textvariable=self.camera_ip, width=15)
        ip_entry.grid(row=0, column=1, sticky=tk.W, padx=(0, 10))
        
        # Usuario
        ttk.Label(config_frame, text="Usuario:").grid(row=0, column=2, sticky=tk.W, padx=(0, 5))
        user_entry = ttk.Entry(config_frame, textvariable=self.username, width=12)
        user_entry.grid(row=0, column=3, sticky=tk.W, padx=(0, 10))
        
        # Contrase√±a
        ttk.Label(config_frame, text="Contrase√±a:").grid(row=1, column=0, sticky=tk.W, padx=(0, 5))
        pass_entry = ttk.Entry(config_frame, textvariable=self.password, show="*", width=15)
        pass_entry.grid(row=1, column=1, sticky=tk.W, padx=(0, 10))
        
        # Protocolo
        ttk.Label(config_frame, text="Protocolo:").grid(row=1, column=2, sticky=tk.W, padx=(0, 5))
        protocol_combo = ttk.Combobox(config_frame, textvariable=self.protocol, 
                                    values=["auto", "onvif", "rtsp"], width=10)
        protocol_combo.grid(row=1, column=3, sticky=tk.W)
        
        # Botones de acci√≥n
        action_frame = ttk.Frame(self.frame)
        action_frame.pack(fill=tk.X, pady=(5, 0))
        
        ttk.Button(action_frame, text="üîç Test Conectividad", 
                  command=self.test_connectivity).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(action_frame, text="üîå Conectar", 
                  command=self.connect_camera).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(action_frame, text="üì∏ Snapshot", 
                  command=self.take_snapshot).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(action_frame, text="üîÑ Desconectar", 
                  command=self.disconnect_camera).pack(side=tk.LEFT)
        
        # Estado
        status_frame = ttk.Frame(self.frame)
        status_frame.pack(fill=tk.X, pady=(5, 0))
        
        ttk.Label(status_frame, text="Estado:").pack(side=tk.LEFT)
        self.status_label = ttk.Label(status_frame, textvariable=self.connection_status, 
                                     foreground="red")
        self.status_label.pack(side=tk.LEFT, padx=(5, 0))
        
        # Informaci√≥n adicional
        self.info_text = tk.Text(self.frame, height=4, wrap=tk.WORD)
        self.info_text.pack(fill=tk.X, pady=(5, 0))
        
        scrollbar = ttk.Scrollbar(self.info_text)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.info_text.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.info_text.yview)
    
    def log_info(self, message):
        """Agregar informaci√≥n al √°rea de texto."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.info_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.info_text.see(tk.END)
        self.parent.update()
    
    def test_connectivity(self):
        """Probar conectividad b√°sica con la c√°mara."""
        self.log_info("üîç Probando conectividad...")
        
        try:
            ip = self.camera_ip.get()
            
            # Test HTTP b√°sico
            response = requests.get(f"http://{ip}", timeout=3)
            self.log_info("‚úÖ HTTP responde correctamente")
            
            # Test RTSP port
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((ip, 554))
            sock.close()
            
            if result == 0:
                self.log_info("‚úÖ Puerto RTSP (554) accesible")
            else:
                self.log_info("‚ö†Ô∏è Puerto RTSP (554) no accesible")
            
            # Test ONVIF port
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((ip, 2020))
            sock.close()
            
            if result == 0:
                self.log_info("‚úÖ Puerto ONVIF (2020) accesible")
            else:
                self.log_info("‚ö†Ô∏è Puerto ONVIF (2020) no accesible")
            
        except requests.exceptions.Timeout:
            self.log_info("‚ö†Ô∏è Timeout en conexi√≥n HTTP")
        except requests.exceptions.ConnectionError:
            self.log_info("‚ùå No se puede conectar con la c√°mara")
        except Exception as e:
            self.log_info(f"‚ùå Error en conectividad: {str(e)}")
    
    def find_working_rtsp_url(self):
        """Encontrar URL RTSP funcional."""
        ip = self.camera_ip.get()
        user = self.username.get()
        password = self.password.get()
        
        test_urls = [
            f"rtsp://{user}:{password}@{ip}:554/stream1",
            f"rtsp://{user}:{password}@{ip}:554/stream2",
            f"rtsp://{user}:{password}@{ip}:554/live",
            f"rtsp://{user}:{password}@{ip}:554/h264_stream",
        ]
        
        for url in test_urls:
            try:
                cap = cv2.VideoCapture(url)
                if cap.isOpened():
                    ret, frame = cap.read()
                    cap.release()
                    if ret and frame is not None:
                        return url
            except:
                continue
        
        return None
    
    def connect_camera(self):
        """Conectar con la c√°mara usando el protocolo seleccionado."""
        if not self.password.get():
            messagebox.showerror("Error", "Ingresa la contrase√±a de la c√°mara")
            return
        
        self.log_info("üîå Iniciando conexi√≥n...")
        self.connection_status.set("Conectando...")
        self.status_label.config(foreground="orange")
        
        def connect_thread():
            try:
                protocol = self.protocol.get()
                
                if protocol == "auto" or protocol == "rtsp":
                    # Intentar RTSP primero
                    self.log_info("üé• Probando conexi√≥n RTSP...")
                    rtsp_url = self.find_working_rtsp_url()
                    
                    if rtsp_url:
                        self.log_info("‚úÖ URL RTSP funcional encontrada")
                        self.log_info(f"   URL: {rtsp_url.replace(self.password.get(), '***')}")
                        
                        # Crear configuraci√≥n para RTSP
                        camera_config = {
                            'name': f'TP-Link {self.camera_ip.get()}',
                            'brand': 'tplink',
                            'type': 'rtsp',
                            'ip': self.camera_ip.get(),
                            'rtsp_url': rtsp_url
                        }
                        
                        # Llamar callback con la configuraci√≥n
                        self.on_connect_callback(camera_config)
                        
                        self.connection_status.set("Conectado (RTSP)")
                        self.status_label.config(foreground="green")
                        return
                
                if protocol == "auto" or protocol == "onvif":
                    # Intentar ONVIF
                    self.log_info("üîß Probando conexi√≥n ONVIF...")
                    
                    try:
                        from onvif import ONVIFCamera
                        cam = ONVIFCamera(self.camera_ip.get(), 2020, 
                                        self.username.get(), self.password.get())
                        device_service = cam.create_devicemgmt_service()
                        device_info = device_service.GetDeviceInformation()
                        
                        self.log_info("‚úÖ Conexi√≥n ONVIF exitosa")
                        self.log_info(f"   Modelo: {device_info.Model}")
                        
                        # Crear configuraci√≥n para ONVIF
                        camera_config = {
                            'name': f'TP-Link {self.camera_ip.get()}',
                            'brand': 'tplink',
                            'type': 'onvif',
                            'ip': self.camera_ip.get(),
                            'port': 2020,
                            'username': self.username.get(),
                            'password': self.password.get()
                        }
                        
                        self.on_connect_callback(camera_config)
                        
                        self.connection_status.set("Conectado (ONVIF)")
                        self.status_label.config(foreground="green")
                        return
                        
                    except Exception as e:
                        self.log_info(f"‚ö†Ô∏è ONVIF no disponible: {str(e)}")
                
                # Si ning√∫n protocolo funcion√≥
                self.log_info("‚ùå No se pudo conectar con ning√∫n protocolo")
                self.connection_status.set("Error conexi√≥n")
                self.status_label.config(foreground="red")
                
            except Exception as e:
                self.log_info(f"‚ùå Error general: {str(e)}")
                self.connection_status.set("Error")
                self.status_label.config(foreground="red")
        
        # Ejecutar en hilo separado
        threading.Thread(target=connect_thread, daemon=True).start()
    
    def disconnect_camera(self):
        """Desconectar c√°mara."""
        self.log_info("üîå Desconectando c√°mara...")
        self.connection_status.set("Desconectado")
        self.status_label.config(foreground="red")
        
        # Notificar desconexi√≥n
        self.on_connect_callback(None)
    
    def take_snapshot(self):
        """Capturar snapshot de la c√°mara."""
        self.log_info("üì∏ Capturando snapshot...")
        
        # Esta funcionalidad se implementar√≠a con el visor activo
        if self.connection_status.get() == "Desconectado":
            self.log_info("‚ö†Ô∏è Conecta la c√°mara primero")
            return
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"tplink_snapshot_{timestamp}.jpg"
        self.log_info(f"üíæ Snapshot guardado: {filename}")


class TPLinkIntegratedViewer:
    """Visor integrado espec√≠fico para TP-Link Tapo."""
    
    def __init__(self):
        self.logger = logging.getLogger("TPLinkViewer")
        self.active_camera = None
        self.viewer_thread = None
        self.is_streaming = False
        
        self.setup_gui()
        self.logger.info("Visor TP-Link Tapo iniciado")
    
    def setup_gui(self):
        """Configurar interfaz gr√°fica principal."""
        self.root = tk.Tk()
        self.root.title("TP-Link Tapo - Visor Integrado")
        self.root.geometry("1200x800")
        
        # Panel de control superior
        self.control_panel = TPLinkControlPanel(
            self.root, 
            self.on_camera_connection_change
        )
        
        # Frame del viewer
        self.viewer_frame = ttk.LabelFrame(self.root, text="üìπ Vista en Tiempo Real", padding=10)
        self.viewer_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Canvas para el video
        self.video_canvas = tk.Canvas(self.viewer_frame, bg="black")
        self.video_canvas.pack(fill=tk.BOTH, expand=True)
        
        # Mensaje inicial
        self.video_canvas.create_text(
            400, 300, 
            text="üé• Conecta tu c√°mara TP-Link Tapo\npara ver el stream en tiempo real",
            fill="white", font=("Arial", 16), justify=tk.CENTER
        )
        
        # Frame de estado inferior
        self.status_frame = ttk.Frame(self.root)
        self.status_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Labels de estado
        self.fps_label = ttk.Label(self.status_frame, text="FPS: --")
        self.fps_label.pack(side=tk.LEFT)
        
        self.resolution_label = ttk.Label(self.status_frame, text="Resoluci√≥n: --")
        self.resolution_label.pack(side=tk.LEFT, padx=(20, 0))
        
        # Botones de acci√≥n
        self.action_frame = ttk.Frame(self.status_frame)
        self.action_frame.pack(side=tk.RIGHT)
        
        ttk.Button(self.action_frame, text="üì∏ Snapshot", 
                  command=self.capture_snapshot).pack(side=tk.RIGHT, padx=2)
        ttk.Button(self.action_frame, text="üé¨ Grabar", 
                  command=self.toggle_recording).pack(side=tk.RIGHT, padx=2)
    
    def on_camera_connection_change(self, camera_config):
        """Callback cuando cambia la conexi√≥n de c√°mara."""
        if camera_config is None:
            # Desconectar
            self.disconnect_camera()
        else:
            # Conectar nueva c√°mara
            self.connect_camera(camera_config)
    
    def connect_camera(self, camera_config):
        """Conectar y iniciar streaming de c√°mara."""
        self.logger.info(f"Conectando c√°mara: {camera_config['name']}")
        
        try:
            # Detener streaming anterior si existe
            self.disconnect_camera()
            
            self.active_camera = camera_config
            self.is_streaming = True
            
            # Iniciar thread de streaming
            self.viewer_thread = threading.Thread(target=self.stream_video, daemon=True)
            self.viewer_thread.start()
            
        except Exception as e:
            self.logger.error(f"Error conectando c√°mara: {str(e)}")
            messagebox.showerror("Error", f"No se pudo conectar la c√°mara: {str(e)}")
    
    def disconnect_camera(self):
        """Desconectar c√°mara y detener streaming."""
        self.is_streaming = False
        self.active_camera = None
        
        # Limpiar canvas
        self.video_canvas.delete("all")
        self.video_canvas.create_text(
            400, 300, 
            text="üé•‚úÖ C√°mara desconectada\nConecta una c√°mara para ver el stream",
            fill="white", font=("Arial", 16), justify=tk.CENTER
        )
        
        # Reset labels
        self.fps_label.config(text="FPS: --")
        self.resolution_label.config(text="Resoluci√≥n: --")
    
    def stream_video(self):
        """Hilo principal de streaming de video."""
        if not self.active_camera:
            return
        
        cap = None
        frame_count = 0
        fps_start_time = time.time()
        
        try:
            if self.active_camera['type'] == 'rtsp':
                # Usar URL RTSP directa
                rtsp_url = self.active_camera['rtsp_url']
                cap = cv2.VideoCapture(rtsp_url)
                cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
                
            elif self.active_camera['type'] == 'onvif':
                # Para ONVIF necesitar√≠amos implementar la conexi√≥n espec√≠fica
                self.logger.warning("Streaming ONVIF no implementado en esta versi√≥n")
                return
            
            if not cap or not cap.isOpened():
                self.logger.error("No se pudo abrir el stream de video")
                return
            
            self.logger.info("Streaming iniciado correctamente")
            
            while self.is_streaming and cap.isOpened():
                ret, frame = cap.read()
                
                if not ret or frame is None:
                    continue
                
                # Redimensionar frame para el canvas
                canvas_width = self.video_canvas.winfo_width()
                canvas_height = self.video_canvas.winfo_height()
                
                if canvas_width > 0 and canvas_height > 0:
                    # Mantener aspect ratio
                    h, w = frame.shape[:2]
                    aspect_ratio = w / h
                    
                    if canvas_width / canvas_height > aspect_ratio:
                        new_height = canvas_height - 20
                        new_width = int(new_height * aspect_ratio)
                    else:
                        new_width = canvas_width - 20
                        new_height = int(new_width / aspect_ratio)
                    
                    if new_width > 0 and new_height > 0:
                        frame_resized = cv2.resize(frame, (new_width, new_height))
                        
                        # Convertir a formato para tkinter
                        frame_rgb = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)
                        
                        # Mostrar en canvas (requerir√≠a PIL para implementaci√≥n completa)
                        # Por simplicidad, solo actualizamos el contador FPS
                        
                        frame_count += 1
                        
                        # Calcular FPS cada segundo
                        if time.time() - fps_start_time >= 1.0:
                            fps = frame_count / (time.time() - fps_start_time)
                            
                            # Actualizar labels en el hilo principal
                            self.root.after(0, lambda: self.update_stream_info(fps, w, h))
                            
                            frame_count = 0
                            fps_start_time = time.time()
                
                time.sleep(0.033)  # ~30 FPS
            
        except Exception as e:
            self.logger.error(f"Error en streaming: {str(e)}")
        finally:
            if cap:
                cap.release()
    
    def update_stream_info(self, fps, width, height):
        """Actualizar informaci√≥n del stream en la UI."""
        self.fps_label.config(text=f"FPS: {fps:.1f}")
        self.resolution_label.config(text=f"Resoluci√≥n: {width}x{height}")
    
    def capture_snapshot(self):
        """Capturar snapshot de la c√°mara."""
        if not self.active_camera:
            messagebox.showwarning("Advertencia", "No hay c√°mara conectada")
            return
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"tplink_snapshot_{timestamp}.jpg"
        
        # Implementar captura real aqu√≠
        messagebox.showinfo("Snapshot", f"Snapshot capturado: {filename}")
    
    def toggle_recording(self):
        """Alternar grabaci√≥n de video."""
        if not self.active_camera:
            messagebox.showwarning("Advertencia", "No hay c√°mara conectada")
            return
        
        # Implementar grabaci√≥n aqu√≠
        messagebox.showinfo("Grabaci√≥n", "Funci√≥n de grabaci√≥n no implementada")
    
    def run(self):
        """Ejecutar el visor."""
        self.root.mainloop()


def main():
    """Funci√≥n principal."""
    print("="*60)
    print("üé• TP-LINK TAPO - VISOR INTEGRADO")
    print("="*60)
    print()
    print("üöÄ CARACTER√çSTICAS:")
    print("‚Ä¢ üìπ Streaming en tiempo real RTSP/ONVIF")
    print("‚Ä¢ üîç Auto-detecci√≥n de protocolos")
    print("‚Ä¢ üì∏ Captura de snapshots")
    print("‚Ä¢ üéõÔ∏è Panel de control integrado")
    print("‚Ä¢ üìä Monitor FPS y resoluci√≥n")
    print()
    print("üîß CONFIGURACI√ìN:")
    print("‚Ä¢ Configura tu .env con TP_LINK_* variables")
    print("‚Ä¢ O usa el panel de configuraci√≥n en la app")
    print()
    print("üöÄ Iniciando aplicaci√≥n...")
    print("="*60)
    
    setup_logging()
    
    try:
        viewer = TPLinkIntegratedViewer()
        viewer.run()
        
    except KeyboardInterrupt:
        print("\nüõë Aplicaci√≥n interrumpida por el usuario")
        
    except Exception as e:
        print(f"\n‚ùå Error al ejecutar el visor: {str(e)}")
        print("\nüîß Sugerencias:")
        print("1. Verificar configuraci√≥n .env")
        print("2. Confirmar conectividad con la c√°mara")
        print("3. Revisar logs para m√°s detalles")
        
    finally:
        print("\n‚úÖ Visor TP-Link finalizado")


if __name__ == "__main__":
    main() 