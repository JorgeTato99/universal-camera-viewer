"""
Ejemplo completo de conexi√≥n HTTP/Amcrest para c√°maras Dahua.
Demuestra todas las funcionalidades HTTP CGI disponibles en el sistema.

IMPORTANTE: Este ejemplo funciona con c√°maras Dahua que soporten HTTP CGI.
La c√°mara Hero-K51H NO es compatible con este protocolo.

Caracter√≠sticas incluidas:
- Conexi√≥n HTTP con autenticaci√≥n Digest
- Informaci√≥n completa del dispositivo
- Snapshots v√≠a CGI
- Stream MJPEG
- Controles PTZ completos
- Presets PTZ
- Factory Pattern
- Manejo robusto de errores
"""

import time
import logging
from pathlib import Path
import sys

# Agregar el directorio src al path
sys.path.append(str(Path(__file__).parent.parent.parent / "src"))

from connections.amcrest_connection import AmcrestConnection
from connections import ConnectionFactory
from utils.config import get_config


def setup_logging():
    """
    Configura el sistema de logging para el ejemplo.
    """
    # Crear directorio de logs si no existe
    logs_dir = Path(__file__).parent.parent / "logs"
    logs_dir.mkdir(exist_ok=True)
    
    log_file = logs_dir / "amcrest_example.log"
    
    # Limpiar configuraci√≥n existente
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler(log_file, encoding='utf-8')
        ],
        force=True
    )
    
    print(f"üìù Logs guard√°ndose en: {log_file}")


def show_compatibility_warning():
    """
    Muestra advertencia sobre compatibilidad del protocolo HTTP CGI.
    """
    print("\n" + "="*60)
    print("‚ö†Ô∏è ADVERTENCIA DE COMPATIBILIDAD")
    print("="*60)
    print("El protocolo HTTP CGI/Amcrest NO es compatible con:")
    print("‚Ä¢ Dahua Hero-K51H")
    print("‚Ä¢ Algunos modelos espec√≠ficos de Dahua")
    print()
    print("Si tu c√°mara es Hero-K51H, usa:")
    print("‚Ä¢ ONVIF (protocolo principal recomendado)")
    print("‚Ä¢ RTSP (protocolo de backup)")
    print()
    print("Este ejemplo es √∫til para:")
    print("‚Ä¢ Otras c√°maras Dahua compatibles con HTTP CGI")
    print("‚Ä¢ Testing de funcionalidades HTTP")
    print("‚Ä¢ Desarrollo y debugging")
    print("="*60)


def test_amcrest_connection():
    """
    Demuestra la conexi√≥n HTTP/Amcrest con context manager.
    
    Returns:
        bool: True si la conexi√≥n es exitosa
    """
    print("\n" + "="*60)
    print("üîó CONEXI√ìN HTTP/AMCREST CON CONTEXT MANAGER")
    print("="*60)
    
    logger = logging.getLogger(__name__)
    
    try:
        # Obtener configuraci√≥n
        config = get_config()
        credentials = config.get_camera_credentials()
        
        print(f"üìç Conectando a: {config.camera_ip}:{config.http_port}")
        print(f"üë§ Usuario: {credentials.get('username')}")
        
        # Crear conexi√≥n Amcrest
        amcrest_conn = AmcrestConnection(
            camera_ip=config.camera_ip,
            credentials=credentials,
            port=config.http_port,
            timeout=15
        )
        
        # Usar context manager
        with amcrest_conn as conn:
            print("‚úÖ Conexi√≥n HTTP establecida exitosamente")
            
            # Mostrar informaci√≥n de la conexi√≥n
            conn_info = conn.get_connection_info()
            print(f"üìä Info conexi√≥n: {conn_info}")
            
            # Obtener informaci√≥n completa del dispositivo
            print("\nüìã Obteniendo informaci√≥n del dispositivo...")
            device_info = conn.get_device_info()
            if device_info:
                print("‚úÖ Informaci√≥n del dispositivo:")
                for key, value in device_info.items():
                    print(f"   {key}: {value}")
            else:
                print("‚ö†Ô∏è No se pudo obtener informaci√≥n del dispositivo")
            
            # Obtener URL del stream MJPEG
            print("\nüé• Obteniendo URL de stream MJPEG...")
            mjpeg_url = conn.get_mjpeg_stream_url()
            # Ocultar contrase√±a en la URL
            safe_url = mjpeg_url.replace(config.camera_password, '***')
            print(f"‚úÖ URL MJPEG: {safe_url}")
            
            # Prueba de snapshots m√∫ltiples
            print("\nüì∏ Pruebas de snapshots...")
            snapshot_count = 3
            snapshots_success = 0
            
            for i in range(snapshot_count):
                timestamp = int(time.time())
                snapshot_filename = f"examples/logs/amcrest_snapshot_{timestamp}_{i+1}.jpg"
                
                print(f"   Capturando snapshot {i+1}/{snapshot_count}...")
                
                if conn.save_snapshot(snapshot_filename):
                    print(f"   ‚úÖ Snapshot {i+1} guardado: {snapshot_filename}")
                    snapshots_success += 1
                else:
                    print(f"   ‚ùå Error al guardar snapshot {i+1}")
                
                time.sleep(1)  # Pausa entre snapshots
            
            print(f"‚úÖ Snapshots completados: {snapshots_success}/{snapshot_count}")
            
            # Prueba de captura de frame
            print("\nüñºÔ∏è Capturando frame directo...")
            frame = conn.get_frame()
            if frame is not None:
                height, width = frame.shape[:2]
                print(f"‚úÖ Frame capturado: {width}x{height}")
            else:
                print("‚ö†Ô∏è No se pudo capturar frame directo")
            
        print("‚úÖ Context manager completado - recursos liberados")
        return True
        
    except Exception as e:
        logger.error(f"Error durante conexi√≥n Amcrest: {str(e)}")
        print(f"‚ùå Error: {str(e)}")
        print("üí° Esto es normal si tu c√°mara no soporta HTTP CGI")
        return False


def test_ptz_controls():
    """
    Demuestra los controles PTZ completos (si la c√°mara los soporta).
    
    Returns:
        bool: True si PTZ funciona
    """
    print("\n" + "="*60)
    print("üéÆ CONTROLES PTZ COMPLETOS")
    print("="*60)
    
    logger = logging.getLogger(__name__)
    config = get_config()
    credentials = config.get_camera_credentials()
    
    amcrest_conn = AmcrestConnection(
        camera_ip=config.camera_ip,
        credentials=credentials,
        port=config.http_port
    )
    
    try:
        if amcrest_conn.connect():
            print("‚úÖ Conexi√≥n PTZ establecida")
            
            # Secuencia de comandos PTZ de prueba
            ptz_sequence = [
                ("up", 2, "üîº Mover hacia arriba"),
                ("stop", 0, "‚èπÔ∏è Detener movimiento"),
                ("down", 2, "üîΩ Mover hacia abajo"),
                ("stop", 0, "‚èπÔ∏è Detener movimiento"),
                ("left", 2, "‚óÄÔ∏è Mover hacia la izquierda"),
                ("stop", 0, "‚èπÔ∏è Detener movimiento"),
                ("right", 2, "‚ñ∂Ô∏è Mover hacia la derecha"),
                ("stop", 0, "‚èπÔ∏è Detener movimiento"),
                ("zoom_in", 1, "üîç Zoom in"),
                ("stop", 0, "‚èπÔ∏è Detener zoom"),
                ("zoom_out", 1, "üîç Zoom out"),
                ("stop", 0, "‚èπÔ∏è Detener zoom")
            ]
            
            print("üé¨ Ejecutando secuencia de comandos PTZ...")
            success_count = 0
            
            for action, speed, description in ptz_sequence:
                print(f"   {description}")
                
                if amcrest_conn.ptz_control(action, speed):
                    print(f"   ‚úÖ Comando '{action}' ejecutado")
                    success_count += 1
                else:
                    print(f"   ‚ö†Ô∏è Comando '{action}' fall√≥ o no soportado")
                
                time.sleep(1.5)  # Pausa entre comandos
            
            print(f"\n‚úÖ Comandos PTZ completados: {success_count}/{len(ptz_sequence)}")
            
            # Prueba de presets
            print("\nüìç Prueba de presets PTZ...")
            preset_id = 1
            preset_name = "Preset de Prueba"
            
            if amcrest_conn.set_preset(preset_id, preset_name):
                print(f"‚úÖ Preset {preset_id} '{preset_name}' establecido")
                
                # Mover la c√°mara
                print("   üìê Moviendo c√°mara para probar preset...")
                amcrest_conn.ptz_control("right", 2)
                time.sleep(2)
                amcrest_conn.ptz_control("stop")
                
                # Volver al preset
                if amcrest_conn.goto_preset(preset_id):
                    print(f"‚úÖ Regreso a preset {preset_id} exitoso")
                else:
                    print(f"‚ö†Ô∏è No se pudo ir al preset {preset_id}")
            else:
                print("‚ÑπÔ∏è Presets PTZ no soportados en este dispositivo")
            
            amcrest_conn.disconnect()
            return success_count > 0
            
        else:
            print("‚ùå No se pudo establecer conexi√≥n para PTZ")
            return False
            
    except Exception as e:
        logger.error(f"Error en pruebas PTZ: {str(e)}")
        print(f"‚ùå Error PTZ: {str(e)}")
        return False


def test_factory_integration():
    """
    Demuestra el uso del Factory Pattern para crear conexiones Amcrest.
    
    Returns:
        bool: True si factory funciona
    """
    print("\n" + "="*60)
    print("üè≠ FACTORY PATTERN - CREACI√ìN AMCREST")
    print("="*60)
    
    config = get_config()
    credentials = config.get_camera_credentials()
    
    try:
        # Crear conexi√≥n via factory
        connection = ConnectionFactory.create_connection(
            connection_type="amcrest",
            camera_ip=config.camera_ip,
            credentials=credentials
        )
        
        print(f"‚úÖ Conexi√≥n Amcrest creada: {type(connection).__name__}")
        print(f"üìä Info: {connection.get_connection_info()}")
        
        # Probar funcionalidad b√°sica
        if connection.connect():
            print("‚úÖ Factory connection establecida")
            
            # Snapshot r√°pido via factory
            snapshot_data = connection.get_snapshot()
            if snapshot_data:
                print(f"‚úÖ Snapshot via factory: {len(snapshot_data)} bytes")
            
            connection.disconnect()
            return True
        else:
            print("‚ùå Factory connection fall√≥")
            return False
            
    except Exception as e:
        print(f"‚ùå Error creando conexi√≥n Amcrest: {str(e)}")
        return False


def test_error_handling():
    """
    Demuestra el manejo robusto de errores con credenciales/IP incorrectas.
    """
    print("\n" + "="*60)
    print("üõ°Ô∏è PRUEBA DE MANEJO DE ERRORES")
    print("="*60)
    
    # Credenciales incorrectas intencionalmente
    bad_credentials = {
        "username": "wrong_user",
        "password": "wrong_password"
    }
    
    print("1. Probando con IP inv√°lida...")
    amcrest_conn = AmcrestConnection(
        camera_ip="192.168.1.999",  # IP inv√°lida
        credentials=bad_credentials,
        timeout=5  # Timeout corto para test
    )
    
    try:
        if amcrest_conn.connect():
            print("‚ö†Ô∏è ADVERTENCIA: Conexi√≥n exitosa con IP inv√°lida")
            amcrest_conn.disconnect()
        else:
            print("‚úÖ Error capturado correctamente - IP inv√°lida")
    except Exception as e:
        print(f"‚úÖ Excepci√≥n capturada: {str(e)[:50]}...")
    
    print("\n2. Probando con credenciales incorrectas...")
    config = get_config()
    amcrest_conn2 = AmcrestConnection(
        camera_ip=config.camera_ip,  # IP correcta
        credentials=bad_credentials,  # Credenciales incorrectas
        timeout=5
    )
    
    try:
        if amcrest_conn2.connect():
            print("‚ö†Ô∏è ADVERTENCIA: Conexi√≥n exitosa con credenciales incorrectas")
            amcrest_conn2.disconnect()
        else:
            print("‚úÖ Error capturado correctamente - credenciales incorrectas")
    except Exception as e:
        print(f"‚úÖ Excepci√≥n capturada: {str(e)[:50]}...")


def main():
    """
    Funci√≥n principal que ejecuta todos los ejemplos Amcrest/HTTP.
    """
    print("üöÄ EJEMPLO COMPLETO HTTP/AMCREST - C√ÅMARAS DAHUA")
    print("="*60)
    print("Este ejemplo demuestra todas las funcionalidades HTTP CGI:")
    print("‚Ä¢ Conexi√≥n HTTP con autenticaci√≥n Digest")
    print("‚Ä¢ Informaci√≥n completa del dispositivo")
    print("‚Ä¢ Snapshots v√≠a CGI")
    print("‚Ä¢ Stream MJPEG")
    print("‚Ä¢ Controles PTZ completos")
    print("‚Ä¢ Presets PTZ")
    print("‚Ä¢ Factory Pattern")
    print("‚Ä¢ Manejo robusto de errores")
    print()
    
    # Configurar logging
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # Mostrar advertencia de compatibilidad
        show_compatibility_warning()
        
        # Preguntar si continuar
        print("\n¬øTu c√°mara soporta HTTP CGI? (Enter para continuar, Ctrl+C para salir)")
        input()
        
        # Verificar configuraci√≥n
        config = get_config()
        if not config.validate_configuration():
            print("‚ùå Configuraci√≥n inv√°lida. Verifica tu archivo .env")
            return
        
        print(f"\nüìç Configuraci√≥n:")
        print(f"   IP: {config.camera_ip}")
        print(f"   Puerto HTTP: {config.http_port}")
        print(f"   Usuario: {config.camera_user}")
        
        # Ejecutar pruebas
        results = []
        
        print("\nüîÑ Ejecutando pruebas...")
        
        # 1. Conexi√≥n b√°sica
        connection_success = test_amcrest_connection()
        results.append(connection_success)
        
        time.sleep(2)
        
        # 2. Factory Pattern
        factory_success = test_factory_integration()
        results.append(factory_success)
        
        time.sleep(2)
        
        # 3. Controles PTZ (solo si conexi√≥n b√°sica funcion√≥)
        if connection_success:
            ptz_success = test_ptz_controls()
            results.append(ptz_success)
        else:
            print("‚è≠Ô∏è Saltando pruebas PTZ (conexi√≥n b√°sica fall√≥)")
            results.append(False)
        
        time.sleep(2)
        
        # 4. Manejo de errores
        test_error_handling()
        
        # Resumen final
        print("\n" + "="*60)
        print("üìä RESUMEN DE RESULTADOS")
        print("="*60)
        
        tests = ["Conexi√≥n HTTP", "Factory Pattern", "Controles PTZ"]
        for i, (test, result) in enumerate(zip(tests, results)):
            status = "‚úÖ EXITOSO" if result else "‚ùå FALL√ì"
            print(f"{i+1}. {test}: {status}")
        
        success_rate = sum(results) / len(results) * 100
        print(f"\nüéØ Tasa de √©xito: {success_rate:.1f}%")
        
        if success_rate >= 33:
            print("üéâ HTTP CGI funcionando - Tu c√°mara es compatible")
        else:
            print("‚ö†Ô∏è HTTP CGI no funciona - Usa ONVIF o RTSP")
            print("üí° Esto es normal para Hero-K51H y modelos similares")
        
    except KeyboardInterrupt:
        print("\nüõë Ejemplo interrumpido por el usuario")
        
    except Exception as e:
        print(f"\n‚ùå Error general: {str(e)}")
        logger.error(f"Error fatal en ejemplo Amcrest: {str(e)}")
        
    finally:
        print("\n‚úÖ Ejemplo Amcrest/HTTP finalizado")
        print("="*60)


if __name__ == "__main__":
    main() 