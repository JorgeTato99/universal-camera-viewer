"""
Ejemplo completo de conexi√≥n RTSP para c√°maras Dahua.
Demuestra todas las funcionalidades RTSP disponibles en el sistema.

Caracter√≠sticas incluidas:
- Conexi√≥n con context manager
- Conexi√≥n manual
- Captura de frames en tiempo real
- Snapshots autom√°ticos
- Propiedades del stream
- Manejo robusto de errores
- Workflow para Hero-K51H (sleep/wake)
"""

import cv2
import time
import logging
from pathlib import Path
import sys

# Agregar el directorio src al path
sys.path.append(str(Path(__file__).parent.parent.parent / "src"))

from connections.rtsp_connection import RTSPConnection
from utils.config import get_config


def setup_logging():
    """
    Configura el sistema de logging para el ejemplo.
    """
    # Crear directorio de logs si no existe
    logs_dir = Path(__file__).parent.parent / "logs"
    logs_dir.mkdir(exist_ok=True)
    
    log_file = logs_dir / "rtsp_example.log"
    
    # Limpiar configuraci√≥n existente
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler(log_file, encoding='utf-8')
        ],
        force=True
    )
    
    print(f"üìù Logs guard√°ndose en: {log_file}")


def show_hero_k51h_workflow():
    """
    Muestra el workflow espec√≠fico para Hero-K51H con modo sleep/wake.
    """
    print("\n" + "="*60)
    print("üì± WORKFLOW HERO-K51H (IMPORTANTE)")
    print("="*60)
    print("La c√°mara Hero-K51H tiene un comportamiento sleep/wake:")
    print()
    print("1. üåô Servicios RTSP dormidos por defecto (ahorro energ√©tico)")
    print("2. üì± Abrir app DMSS y conectar brevemente")
    print("3. ‚ö° Los servicios RTSP se 'despiertan'")
    print("4. üì± Cerrar DMSS")
    print("5. üöÄ Ejecutar este ejemplo (conexi√≥n exitosa)")
    print()
    print("Si no sigues este workflow, RTSP puede fallar.")
    print("Recomendaci√≥n: Usar ONVIF como protocolo principal.")
    print("="*60)


def test_rtsp_context_manager():
    """
    Demuestra el uso de RTSP con context manager (m√©todo recomendado).
    
    Returns:
        bool: True si la prueba es exitosa
    """
    print("\n" + "="*60)
    print("üîó CONEXI√ìN RTSP CON CONTEXT MANAGER")
    print("="*60)
    
    logger = logging.getLogger(__name__)
    
    try:
        # Obtener configuraci√≥n
        config = get_config()
        credentials = config.get_camera_credentials()
        
        print(f"üìç Conectando a: {config.camera_ip}:{config.rtsp_port}")
        print(f"üë§ Usuario: {credentials.get('username')}")
        
        # Crear conexi√≥n RTSP
        rtsp_conn = RTSPConnection(
            camera_ip=config.camera_ip,
            credentials=credentials,
            port=config.rtsp_port,
            channel=config.rtsp_channel,
            subtype=config.rtsp_subtype
        )
        
        # Usar context manager
        with rtsp_conn as conn:
            print("‚úÖ Conexi√≥n RTSP establecida exitosamente")
            
            # Mostrar informaci√≥n de la conexi√≥n
            conn_info = conn.get_connection_info()
            print(f"üìä Info conexi√≥n: {conn_info}")
            
            # Obtener propiedades del stream
            properties = conn.get_frame_properties()
            if properties:
                print("üìπ Propiedades del stream:")
                for key, value in properties.items():
                    print(f"   {key}: {value}")
            
            # Capturar frames
            print("\nüé• Capturando frames...")
            frames_captured = 0
            max_frames = 10
            start_time = time.time()
            
            while frames_captured < max_frames:
                frame = conn.get_frame()
                if frame is not None:
                    frames_captured += 1
                    height, width = frame.shape[:2]
                    print(f"   Frame {frames_captured}: {width}x{height}")
                    
                    # Mostrar primer frame por 2 segundos
                    if frames_captured == 1:
                        print("   üì∫ Mostrando primer frame...")
                        cv2.imshow("Dahua RTSP - Frame", frame)
                        cv2.waitKey(2000)
                        cv2.destroyAllWindows()
                        
                        # Guardar snapshot
                        snapshot_path = f"examples/logs/rtsp_snapshot_{int(time.time())}.jpg"
                        if conn.save_snapshot(snapshot_path):
                            print(f"   üì∏ Snapshot guardado: {snapshot_path}")
                    
                    time.sleep(0.1)  # Pausa entre frames
                else:
                    print("   ‚ö†Ô∏è No se pudo obtener frame")
                    break
            
            elapsed = time.time() - start_time
            fps = frames_captured / elapsed if elapsed > 0 else 0
            
            print(f"\n‚úÖ Captura completada:")
            print(f"   Frames: {frames_captured}/{max_frames}")
            print(f"   Tiempo: {elapsed:.2f}s")
            print(f"   FPS: {fps:.2f}")
            
        print("‚úÖ Context manager completado - recursos liberados")
        return True
        
    except Exception as e:
        logger.error(f"Error durante conexi√≥n RTSP: {str(e)}")
        print(f"‚ùå Error: {str(e)}")
        return False


def test_rtsp_manual_connection():
    """
    Demuestra la conexi√≥n RTSP manual (sin context manager).
    
    Returns:
        bool: True si la prueba es exitosa
    """
    print("\n" + "="*60)
    print("üîß CONEXI√ìN RTSP MANUAL")
    print("="*60)
    
    logger = logging.getLogger(__name__)
    config = get_config()
    credentials = config.get_camera_credentials()
    
    # Crear conexi√≥n
    rtsp_conn = RTSPConnection(
        camera_ip=config.camera_ip,
        credentials=credentials
    )
    
    try:
        # Conectar manualmente
        print("1. Estableciendo conexi√≥n...")
        if rtsp_conn.connect():
            print("‚úÖ Conexi√≥n manual establecida")
            
            # Verificar estado
            print("2. Verificando estado...")
            if rtsp_conn.is_alive():
                print("‚úÖ Conexi√≥n activa y funcionando")
                
                # Capturar frame
                print("3. Capturando frame de prueba...")
                frame = rtsp_conn.get_frame()
                if frame is not None:
                    height, width = frame.shape[:2]
                    print(f"‚úÖ Frame capturado: {width}x{height}")
                else:
                    print("‚ö†Ô∏è No se pudo capturar frame")
            else:
                print("‚ùå Conexi√≥n no responde")
                return False
        else:
            print("‚ùå Fall√≥ la conexi√≥n manual")
            return False
            
        return True
        
    except Exception as e:
        logger.error(f"Error en conexi√≥n manual: {str(e)}")
        print(f"‚ùå Error: {str(e)}")
        return False
        
    finally:
        # Asegurar desconexi√≥n
        print("4. Desconectando...")
        if rtsp_conn.disconnect():
            print("‚úÖ Desconexi√≥n exitosa")
        else:
            print("‚ö†Ô∏è Problemas en desconexi√≥n")


def test_rtsp_error_handling():
    """
    Demuestra el manejo robusto de errores con credenciales/IP incorrectas.
    """
    print("\n" + "="*60)
    print("üõ°Ô∏è PRUEBA DE MANEJO DE ERRORES")
    print("="*60)
    
    logger = logging.getLogger(__name__)
    
    # Credenciales incorrectas intencionalmente
    bad_credentials = {
        "username": "wrong_user",
        "password": "wrong_password"
    }
    
    print("1. Probando con IP inv√°lida...")
    rtsp_conn = RTSPConnection(
        camera_ip="192.168.1.999",  # IP inv√°lida
        credentials=bad_credentials
    )
    
    try:
        if rtsp_conn.connect():
            print("‚ö†Ô∏è ADVERTENCIA: Conexi√≥n exitosa con IP inv√°lida")
            rtsp_conn.disconnect()
        else:
            print("‚úÖ Error capturado correctamente - IP inv√°lida")
    except Exception as e:
        print(f"‚úÖ Excepci√≥n capturada: {str(e)[:50]}...")
    
    print("\n2. Probando con credenciales incorrectas...")
    config = get_config()
    rtsp_conn2 = RTSPConnection(
        camera_ip=config.camera_ip,  # IP correcta
        credentials=bad_credentials  # Credenciales incorrectas
    )
    
    try:
        if rtsp_conn2.connect():
            print("‚ö†Ô∏è ADVERTENCIA: Conexi√≥n exitosa con credenciales incorrectas")
            rtsp_conn2.disconnect()
        else:
            print("‚úÖ Error capturado correctamente - credenciales incorrectas")
    except Exception as e:
        print(f"‚úÖ Excepci√≥n capturada: {str(e)[:50]}...")


def main():
    """
    Funci√≥n principal que ejecuta todos los ejemplos RTSP.
    """
    print("üöÄ EJEMPLO COMPLETO RTSP - C√ÅMARAS DAHUA")
    print("="*60)
    print("Este ejemplo demuestra todas las funcionalidades RTSP:")
    print("‚Ä¢ Conexi√≥n con context manager (recomendado)")
    print("‚Ä¢ Conexi√≥n manual")
    print("‚Ä¢ Captura de frames en tiempo real")
    print("‚Ä¢ Snapshots autom√°ticos")
    print("‚Ä¢ Propiedades del stream")
    print("‚Ä¢ Manejo robusto de errores")
    print("‚Ä¢ Workflow espec√≠fico Hero-K51H")
    print()
    
    # Configurar logging
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # Verificar configuraci√≥n
        config = get_config()
        if not config.validate_configuration():
            print("‚ùå Configuraci√≥n inv√°lida. Verifica tu archivo .env")
            return
        
        # Mostrar workflow Hero-K51H
        show_hero_k51h_workflow()
        
        # Preguntar si continuar
        print("\n¬øHas seguido el workflow DMSS? (Enter para continuar, Ctrl+C para salir)")
        input()
        
        # Ejecutar pruebas
        results = []
        
        # 1. Context manager
        print("\nüîÑ Ejecutando pruebas...")
        context_success = test_rtsp_context_manager()
        results.append(context_success)
        
        time.sleep(2)
        
        # 2. Conexi√≥n manual
        manual_success = test_rtsp_manual_connection()
        results.append(manual_success)
        
        time.sleep(2)
        
        # 3. Manejo de errores
        test_rtsp_error_handling()
        
        # Resumen final
        print("\n" + "="*60)
        print("üìä RESUMEN DE RESULTADOS")
        print("="*60)
        
        tests = ["Context Manager", "Conexi√≥n Manual"]
        for i, (test, result) in enumerate(zip(tests, results)):
            status = "‚úÖ EXITOSO" if result else "‚ùå FALL√ì"
            print(f"{i+1}. {test}: {status}")
        
        success_rate = sum(results) / len(results) * 100
        print(f"\nüéØ Tasa de √©xito: {success_rate:.1f}%")
        
        if success_rate >= 50:
            print("üéâ RTSP funcionando - Listo para usar")
            print("üí° Consejo: Considera ONVIF como protocolo principal")
        else:
            print("‚ö†Ô∏è RTSP con problemas - Usar ONVIF como alternativa")
        
    except KeyboardInterrupt:
        print("\nüõë Ejemplo interrumpido por el usuario")
        
    except Exception as e:
        print(f"\n‚ùå Error general: {str(e)}")
        logger.error(f"Error fatal en ejemplo RTSP: {str(e)}")
        
    finally:
        print("\n‚úÖ Ejemplo RTSP finalizado")
        print("="*60)


if __name__ == "__main__":
    main() 