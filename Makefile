# Universal Camera Viewer - Makefile
# Comandos profesionales de desarrollo y despliegue
# Proyecto: Visor Universal de C√°maras Multi-Marca

.PHONY: help install install-dev test test-cov lint format clean run run-legacy build pre-commit docs security backup

# Comandos predeterminados de Python y herramientas
PYTHON := python
PIP := pip
PYTEST := pytest
BLACK := black
ISORT := isort
FLAKE8 := flake8
MYPY := mypy
BANDIT := bandit

# Directorios del proyecto
SRC_DIR := src-python
FRONTEND_DIR := src
TEST_DIR := tests
EXAMPLES_DIR := examples
CONFIG_DIR := config
DATA_DIR := data

# Colores para salida en terminal (mejora la experiencia de usuario)
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
WHITE := \033[0;37m
RESET := \033[0m

##@ Ayuda

help: ## Mostrar este mensaje de ayuda
	@echo "$(CYAN)Universal Camera Viewer - Comandos de Desarrollo$(RESET)"
	@echo "$(WHITE)Visor Universal de C√°maras Multi-Marca v0.7.0$(RESET)"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"; printf "\nUso:\n  make $(CYAN)<comando>$(RESET)\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  $(CYAN)%-15s$(RESET) %s\n", $$1, $$2 } /^##@/ { printf "\n$(PURPLE)%s$(RESET)\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Instalaci√≥n

install: ## Instalar dependencias de producci√≥n
	@echo "$(YELLOW)Instalando dependencias de producci√≥n...$(RESET)"
	$(PIP) install -r requirements.txt
	@echo "$(GREEN)‚úì Dependencias de producci√≥n instaladas$(RESET)"

install-dev: install ## Instalar dependencias de desarrollo
	@echo "$(YELLOW)Instalando dependencias de desarrollo...$(RESET)"
	$(PIP) install -r requirements-dev.txt
	@echo "$(GREEN)‚úì Dependencias de desarrollo instaladas$(RESET)"

install-pre-commit: install-dev ## Instalar y configurar hooks de pre-commit
	@echo "$(YELLOW)Configurando hooks de pre-commit...$(RESET)"
	pre-commit install
	pre-commit install --hook-type commit-msg
	@echo "$(GREEN)‚úì Hooks de pre-commit instalados$(RESET)"

##@ Desarrollo

run: ## Ejecutar la aplicaci√≥n Flet (principal)
	@echo "$(BLUE)üöÄ Iniciando Universal Camera Viewer (Flet)...$(RESET)"
	cd $(SRC_DIR) && $(PYTHON) main.py

run-debug: ## Ejecutar aplicaci√≥n con salida de depuraci√≥n
	@echo "$(BLUE)üîç Iniciando en modo debug...$(RESET)"
	cd $(SRC_DIR) && $(PYTHON) main.py --debug

run-legacy: ## Ejecutar versi√≥n legacy de Tkinter (si est√° disponible)
	@echo "$(BLUE)üï∞Ô∏è  Iniciando versi√≥n legacy de Tkinter...$(RESET)"
	@if [ -f "main_tkinter.py" ]; then \
		$(PYTHON) main_tkinter.py; \
	else \
		echo "$(RED)‚ùå Versi√≥n legacy no encontrada$(RESET)"; \
	fi

dev: install-dev run ## Configuraci√≥n r√°pida de desarrollo y ejecuci√≥n

##@ Calidad de C√≥digo

format: ## Formatear c√≥digo con black e isort
	@echo "$(YELLOW)üé® Formateando c√≥digo...$(RESET)"
	$(BLACK) $(SRC_DIR) --line-length 88
	$(ISORT) $(SRC_DIR) --profile black
	@echo "$(GREEN)‚úì C√≥digo formateado correctamente$(RESET)"

lint: ## Ejecutar todas las verificaciones de linting
	@echo "$(YELLOW)üîç Ejecutando verificaciones de linting...$(RESET)"
	$(FLAKE8) $(SRC_DIR) --max-line-length=88 --extend-ignore=E203,W503
	@echo "$(GREEN)‚úì Flake8 ejecutado exitosamente$(RESET)"

type-check: ## Ejecutar verificaci√≥n de tipos con mypy
	@echo "$(YELLOW)üîç Ejecutando verificaci√≥n de tipos...$(RESET)"
	$(MYPY) $(SRC_DIR) --ignore-missing-imports
	@echo "$(GREEN)‚úì Verificaci√≥n de tipos completada$(RESET)"

security: ## Ejecutar an√°lisis de seguridad con bandit
	@echo "$(YELLOW)üîí Ejecutando an√°lisis de seguridad...$(RESET)"
	$(BANDIT) -r $(SRC_DIR) -f json -o security-report.json || true
	$(BANDIT) -r $(SRC_DIR)
	@echo "$(GREEN)‚úì An√°lisis de seguridad completado$(RESET)"

pre-commit: ## Ejecutar hooks de pre-commit en todos los archivos
	@echo "$(YELLOW)üöÄ Ejecutando hooks de pre-commit...$(RESET)"
	pre-commit run --all-files
	@echo "$(GREEN)‚úì Verificaciones de pre-commit completadas$(RESET)"

check-all: format lint type-check security ## Ejecutar todas las verificaciones de calidad
	@echo "$(GREEN)‚úÖ Todas las verificaciones de calidad completadas$(RESET)"

##@ Pruebas y Testing

test: ## Ejecutar pruebas con pytest
	@echo "$(YELLOW)üß™ Ejecutando pruebas...$(RESET)"
	$(PYTEST) $(TEST_DIR) -v
	@echo "$(GREEN)‚úì Pruebas completadas$(RESET)"

test-cov: ## Ejecutar pruebas con reporte de cobertura
	@echo "$(YELLOW)üìä Ejecutando pruebas con cobertura...$(RESET)"
	$(PYTEST) $(TEST_DIR) --cov=$(SRC_DIR) --cov-report=html --cov-report=term-missing
	@echo "$(GREEN)‚úì Reporte de cobertura generado en htmlcov/$(RESET)"

test-watch: ## Ejecutar pruebas en modo observaci√≥n
	@echo "$(YELLOW)üëÄ Ejecutando pruebas en modo observaci√≥n...$(RESET)"
	$(PYTEST) $(TEST_DIR) -f

test-examples: ## Probar scripts de ejemplo
	@echo "$(YELLOW)üìã Probando scripts de ejemplo...$(RESET)"
	@for script in $(EXAMPLES_DIR)/testing/*.py; do \
		echo "Probando $$script..."; \
		$(PYTHON) $$script || echo "$(RED)‚ùå $$script fall√≥$(RESET)"; \
	done
	@echo "$(GREEN)‚úì Pruebas de ejemplos completadas$(RESET)"

##@ Base de Datos y Datos

db-backup: ## Hacer respaldo de la base de datos de c√°maras
	@echo "$(YELLOW)üíæ Creando respaldo de base de datos...$(RESET)"
	@mkdir -p $(DATA_DIR)/backups
	@cp $(DATA_DIR)/camera_data.db $(DATA_DIR)/backups/camera_data_backup_$$(date +%Y%m%d_%H%M%S).db
	@echo "$(GREEN)‚úì Base de datos respaldada$(RESET)"

db-clean: ## Limpiar cach√© de base de datos
	@echo "$(YELLOW)üßπ Limpiando cach√© de base de datos...$(RESET)"
	@rm -rf $(DATA_DIR)/cache/*
	@echo "$(GREEN)‚úì Cach√© de base de datos limpiado$(RESET)"

##@ Limpieza y Mantenimiento

clean: ## Limpiar archivos temporales y cach√©s
	@echo "$(YELLOW)üßπ Limpiando archivos temporales...$(RESET)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.log" -delete 2>/dev/null || true
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf dist/
	rm -rf build/
	rm -f security-report.json
	@echo "$(GREEN)‚úì Limpieza completada$(RESET)"

clean-all: clean ## Limpieza profunda incluyendo cach√©s de datos
	@echo "$(YELLOW)üßπ Ejecutando limpieza profunda...$(RESET)"
	rm -rf $(DATA_DIR)/cache/*
	rm -rf $(DATA_DIR)/snapshots/*
	@echo "$(GREEN)‚úì Limpieza profunda completada$(RESET)"

##@ Documentaci√≥n

docs: ## Generar documentaci√≥n del proyecto
	@echo "$(YELLOW)üìö Generando documentaci√≥n...$(RESET)"
	@echo "$(BLUE)Documentaci√≥n del proyecto disponible en:$(RESET)"
	@echo "  - README.md"
	@echo "  - CURRENT_STATUS.md" 
	@echo "  - CHANGELOG.md"
	@echo "$(GREEN)‚úì Documentaci√≥n lista$(RESET)"

##@ Empaquetado y Distribuci√≥n

build: clean ## Construir paquetes de distribuci√≥n
	@echo "$(YELLOW)üì¶ Construyendo paquetes de distribuci√≥n...$(RESET)"
	$(PYTHON) -m build
	@echo "$(GREEN)‚úì Paquetes de distribuci√≥n construidos en dist/$(RESET)"

build-app: ## Construir aplicaci√≥n independiente con Flet
	@echo "$(YELLOW)üì± Construyendo aplicaci√≥n independiente...$(RESET)"
	cd $(SRC_DIR) && flet pack main.py --name "Universal Camera Viewer" --icon ../assets/icon.ico
	@echo "$(GREEN)‚úì Aplicaci√≥n independiente construida$(RESET)"

release-check: ## Verificar si est√° listo para lanzamiento
	@echo "$(YELLOW)üîç Verificando preparaci√≥n para lanzamiento...$(RESET)"
	$(PYTHON) -m twine check dist/*
	@echo "$(GREEN)‚úì Verificaci√≥n de lanzamiento completada$(RESET)"

##@ Configuraci√≥n

config-backup: ## Respaldar archivos de configuraci√≥n
	@echo "$(YELLOW)üíæ Respaldando configuraci√≥n...$(RESET)"
	@mkdir -p $(CONFIG_DIR)/backups
	@cp $(CONFIG_DIR)/*.json $(CONFIG_DIR)/backups/ 2>/dev/null || true
	@echo "$(GREEN)‚úì Configuraci√≥n respaldada$(RESET)"

config-restore: ## Restaurar configuraci√≥n desde respaldo
	@echo "$(YELLOW)üìÅ Respaldos de configuraci√≥n disponibles:$(RESET)"
	@ls -la $(CONFIG_DIR)/backups/ || echo "$(RED)No se encontraron respaldos$(RESET)"

##@ Monitoreo y An√°lisis

performance: ## Ejecutar an√°lisis de rendimiento
	@echo "$(YELLOW)‚ö° Ejecutando an√°lisis de rendimiento...$(RESET)"
	cd $(EXAMPLES_DIR)/testing && $(PYTHON) performance_test.py
	@echo "$(GREEN)‚úì An√°lisis de rendimiento completado$(RESET)"

network-test: ## Probar conectividad de red para c√°maras
	@echo "$(YELLOW)üåê Probando conectividad de red...$(RESET)"
	cd $(EXAMPLES_DIR)/diagnostics && $(PYTHON) network_analyzer.py
	@echo "$(GREEN)‚úì Prueba de red completada$(RESET)"

##@ Comandos R√°pidos

all: install-dev check-all test ## Configuraci√≥n completa de desarrollo y validaci√≥n
	@echo "$(GREEN)üéâ ¬°Todas las verificaciones pasaron! Listo para desarrollo$(RESET)"

ci: format lint test ## Verificaciones de integraci√≥n continua
	@echo "$(GREEN)‚úÖ Verificaciones de CI completadas$(RESET)"

fresh-start: clean-all install-dev install-pre-commit run ## Inicio fresco de desarrollo
	@echo "$(GREEN)üåü Inicio fresco completado$(RESET)"

##@ Informaci√≥n

status: ## Mostrar estado del proyecto
	@echo "$(CYAN)üìä Estado de Universal Camera Viewer$(RESET)"
	@echo "$(YELLOW)Versi√≥n:$(RESET) 0.7.0"
	@echo "$(YELLOW)Python:$(RESET) $$($(PYTHON) --version)"
	@echo "$(YELLOW)Arquitectura:$(RESET) Patr√≥n MVP (65% completo)"
	@echo "$(YELLOW)Framework UI:$(RESET) Flet + Material Design 3"
	@echo "$(YELLOW)Marcas de C√°maras:$(RESET) Dahua, TP-Link, Steren, Gen√©rica"
	@echo "$(YELLOW)Protocolos:$(RESET) ONVIF, RTSP, HTTP/CGI"
	@echo ""
	@echo "$(GREEN)üìÅ Estructura del Proyecto:$(RESET)"
	@echo "  src/          - C√≥digo fuente (arquitectura MVP)"
	@echo "  tests/        - Suites de pruebas"
	@echo "  examples/     - Scripts de ejemplo y diagn√≥sticos"
	@echo "  config/       - Archivos de configuraci√≥n"
	@echo "  data/         - Base de datos y cach√©"

version: ## Mostrar informaci√≥n de versi√≥n
	@echo "$(CYAN)Universal Camera Viewer v0.7.0$(RESET)"
	@echo "$(BLUE)Visor de c√°maras multi-marca con UI moderna en Flet$(RESET)" 