#!/usr/bin/env python3
"""
Script de prueba para conexi√≥n con servidor MediaMTX real.

Este script prueba todo el flujo de integraci√≥n con el servidor MediaMTX
de producci√≥n en 31.220.104.212 con las credenciales proporcionadas.

Flujo de prueba:
1. Autenticaci√≥n con servidor real
2. Creaci√≥n de c√°mara remota
3. Verificaci√≥n de URLs generadas
4. Publicaci√≥n de stream (opcional)
"""

import asyncio
import json
import sys
from datetime import datetime
from pathlib import Path
import argparse

# Agregar rutas al path
sys.path.insert(0, str(Path(__file__).parent))

from services.mediamtx.auth_service import get_mediamtx_auth_service
from services.mediamtx.api_client import get_mediamtx_api_client
from services.database.mediamtx_db_service import get_mediamtx_db_service
from services.logging_service import get_secure_logger
from utils.sanitizers import sanitize_url
from services.mediamtx.remote_models import RemoteCameraRequest

logger = get_secure_logger("test_mediamtx_real")


async def test_server_authentication():
    """Prueba autenticaci√≥n con el servidor real."""
    logger.info("=" * 80)
    logger.info("PRUEBA 1: Autenticaci√≥n con servidor MediaMTX real")
    logger.info("=" * 80)
    
    db_service = get_mediamtx_db_service()
    auth_service = get_mediamtx_auth_service()
    
    # Buscar servidor de producci√≥n
    servers = await db_service.get_servers()
    prod_server = None
    
    for server in servers:
        if "31.220.104.212" in server['api_url']:
            prod_server = server
            break
    
    if not prod_server:
        logger.error("No se encontr√≥ el servidor de producci√≥n en la BD")
        logger.info("Ejecuta: python seed_database.py --mediamtx-only")
        return None
    
    logger.info(f"Servidor encontrado: {prod_server['server_name']}")
    logger.info(f"URL: {prod_server['api_url']}")
    logger.info(f"Usuario: {prod_server['username']}")
    
    # Intentar autenticar
    try:
        auth_result = await auth_service.authenticate(
            server_id=prod_server['server_id'],
            username=prod_server['username'],
            password="easypass123!"  # Contrase√±a real
        )
        
        if auth_result.success:
            logger.info("‚úÖ Autenticaci√≥n exitosa!")
            logger.info(f"   Token obtenido: {auth_result.access_token[:50]}...")
            return prod_server['server_id']
        else:
            logger.error(f"‚ùå Fallo autenticaci√≥n: {auth_result.error}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Error durante autenticaci√≥n: {str(e)}")
        return None


async def test_camera_creation(server_id: int):
    """Prueba creaci√≥n de c√°mara en servidor real."""
    logger.info("\n" + "=" * 80)
    logger.info("PRUEBA 2: Creaci√≥n de c√°mara en servidor remoto")
    logger.info("=" * 80)
    
    api_client = get_mediamtx_api_client()
    
    # Datos de c√°mara de prueba
    camera_data = RemoteCameraRequest(
        name=f"UCG Test Camera - {datetime.now().strftime('%Y%m%d_%H%M%S')}",
        description="C√°mara de prueba desde Universal Camera Gateway",
        rtsp_address="rtsp://192.168.1.172:554/cam/realmonitor?channel=1&subtype=0",
        json_data={
            "features": {
                "motion_detection": True,
                "night_vision": False,
                "two_way_audio": False
            },
            "fps": 15,
            "location": {
                "building": "Test Lab",
                "floor": 1,
                "zone": "development"
            },
            "model": "Dahua Hero-K51H",
            "resolution": "1920x1080",
            "source": "Universal Camera Gateway",
            "test_timestamp": datetime.utcnow().isoformat()
        }
    )
    
    try:
        # Crear c√°mara
        logger.info(f"Creando c√°mara: {camera_data.name}")
        remote_camera = await api_client.create_camera(
            server_id=server_id,
            camera_data=camera_data
        )
        
        logger.info("‚úÖ C√°mara creada exitosamente!")
        logger.info(f"   ID Remoto: {remote_camera.id}")
        logger.info(f"   Estado: {remote_camera.status}")
        logger.info(f"   Publish URL: {sanitize_url(remote_camera.publish_url)}")
        logger.info(f"   WebRTC URL: {sanitize_url(remote_camera.webrtc_url)}")
        logger.info("\nüìã Comando FFmpeg proporcionado por el servidor:")
        logger.info(f"   {remote_camera.agent_command}")
        
        return remote_camera
        
    except Exception as e:
        logger.error(f"‚ùå Error creando c√°mara: {str(e)}")
        return None


async def test_list_cameras(server_id: int):
    """Lista las c√°maras existentes en el servidor."""
    logger.info("\n" + "=" * 80)
    logger.info("PRUEBA 3: Listar c√°maras del servidor")
    logger.info("=" * 80)
    
    api_client = get_mediamtx_api_client()
    
    try:
        cameras = await api_client.list_cameras(server_id, limit=10)
        
        logger.info(f"‚úÖ Total de c√°maras: {cameras.total}")
        
        if cameras.cameras:
            logger.info("\nC√°maras encontradas:")
            for i, camera in enumerate(cameras.cameras[:5], 1):
                logger.info(f"\n{i}. {camera.name}")
                logger.info(f"   ID: {camera.id}")
                logger.info(f"   Estado: {camera.status}")
                logger.info(f"   RTSP: {sanitize_url(camera.rtsp_address)}")
                logger.info(f"   Creada: {camera.created_at}")
                
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error listando c√°maras: {str(e)}")
        return False


async def test_validate_token(server_id: int):
    """Valida que el token sigue siendo v√°lido."""
    logger.info("\n" + "=" * 80)
    logger.info("PRUEBA 4: Validaci√≥n de token JWT")
    logger.info("=" * 80)
    
    auth_service = get_mediamtx_auth_service()
    
    try:
        is_valid = await auth_service.validate_token(server_id)
        
        if is_valid:
            logger.info("‚úÖ Token JWT es v√°lido y funcional")
            
            # Mostrar informaci√≥n del token
            token_info = await auth_service.get_token_info(server_id)
            if token_info:
                logger.info(f"   Creado: {token_info.get('created_at', 'N/A')}")
                logger.info(f"   Expira: {token_info.get('expires_at', 'N/A')}")
        else:
            logger.error("‚ùå Token JWT no es v√°lido o ha expirado")
            
        return is_valid
        
    except Exception as e:
        logger.error(f"‚ùå Error validando token: {str(e)}")
        return False


async def main():
    """Funci√≥n principal de prueba."""
    parser = argparse.ArgumentParser(
        description="Prueba de integraci√≥n con servidor MediaMTX real"
    )
    parser.add_argument(
        "--recreate-db",
        action="store_true",
        help="Recrear base de datos con servidor de producci√≥n"
    )
    parser.add_argument(
        "--skip-creation",
        action="store_true",
        help="Omitir creaci√≥n de c√°mara (solo autenticar y listar)"
    )
    
    args = parser.parse_args()
    
    if args.recreate_db:
        logger.info("Recreando base de datos con servidor de producci√≥n...")
        import subprocess
        
        # Recrear BD
        subprocess.run([
            sys.executable, "migrate_database.py", "--force", "--no-backup"
        ], cwd=Path(__file__).parent)
        
        # Agregar servidor
        subprocess.run([
            sys.executable, "seed_database.py", "--mediamtx-only"
        ], cwd=Path(__file__).parent)
    
    logger.info("\n" + "üöÄ " * 20)
    logger.info("INICIANDO PRUEBAS CON SERVIDOR MEDIAMTX REAL")
    logger.info("Servidor: http://31.220.104.212:8000")
    logger.info("Usuario: jorge.cliente")
    logger.info("üöÄ " * 20 + "\n")
    
    # 1. Autenticaci√≥n
    server_id = await test_server_authentication()
    if not server_id:
        logger.error("\n‚ùå Fallo en autenticaci√≥n. Abortando pruebas.")
        return
    
    # 2. Crear c√°mara (opcional)
    if not args.skip_creation:
        remote_camera = await test_camera_creation(server_id)
        if remote_camera:
            logger.info("\nüí° SIGUIENTE PASO:")
            logger.info("Para publicar video a esta c√°mara, ejecuta:")
            logger.info(f"\n{remote_camera.agent_command}\n")
    
    # 3. Listar c√°maras
    await test_list_cameras(server_id)
    
    # 4. Validar token
    await test_validate_token(server_id)
    
    logger.info("\n" + "‚úÖ " * 20)
    logger.info("PRUEBAS COMPLETADAS")
    logger.info("‚úÖ " * 20 + "\n")
    
    logger.info("üìå RESUMEN:")
    logger.info("- Autenticaci√≥n JWT: ‚úÖ")
    logger.info("- Creaci√≥n de c√°maras: ‚úÖ")
    logger.info("- Listado de c√°maras: ‚úÖ")
    logger.info("- Validaci√≥n de token: ‚úÖ")
    logger.info("\nüéØ El sistema est√° listo para publicar video al servidor remoto!")


if __name__ == "__main__":
    asyncio.run(main())