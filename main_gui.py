#!/usr/bin/env python3
"""
Visor Universal de C√°maras - Aplicaci√≥n Principal
Sistema profesional de videovigilancia multi-marca con mejoras UX avanzadas.

Caracter√≠sticas principales:
- ‚úÖ Interfaz moderna con iconos y tooltips
- ‚úÖ Panel de control completo con pesta√±as
- ‚úÖ Soporte multi-marca (Dahua, TP-Link, Steren, Generic)
- ‚úÖ Configuraci√≥n desde archivo .env
- ‚úÖ Shortcuts de teclado completos
- ‚úÖ M√©tricas en tiempo real (FPS, latencia, uptime)
- ‚úÖ Sistema de layouts adaptativos
- ‚úÖ Feedback visual mejorado
- ‚úÖ Logging detallado para diagn√≥stico
"""

import sys
import os
import logging
import tkinter as tk
from tkinter import ttk, messagebox
from pathlib import Path
from typing import Optional

# Agregar el directorio src al path para imports
sys.path.insert(0, str(Path(__file__).parent / "src"))

def setup_logging():
    """Configura el sistema de logging mejorado."""
    # Crear directorio de logs si no existe
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # Configurar logging b√°sico
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler(log_dir / 'universal_visor.log', encoding='utf-8')
        ]
    )
    
    # Configurar logger espec√≠fico para la aplicaci√≥n
    logger = logging.getLogger("UniversalVisor")
    logger.info("=== Sistema de logging inicializado ===")
    return logger

class UniversalVisorApp:
    """
    Aplicaci√≥n principal del Visor Universal de C√°maras.
    Integra todas las mejoras UX y funcionalidades avanzadas.
    """
    
    def __init__(self):
        """Inicializa la aplicaci√≥n principal."""
        self.logger = setup_logging()
        self.logger.info("üöÄ Iniciando Visor Universal de C√°maras v0.2.0")
        
        # Crear ventana principal
        self._create_main_window()
        
        # Configurar estilos
        self._setup_styles()
        
        # Crear interfaz principal
        self._create_main_interface()
        
        # Configurar eventos
        self._setup_events()
        
        self.logger.info("‚úÖ Aplicaci√≥n principal inicializada correctamente")
    
    def _create_main_window(self):
        """Crea y configura la ventana principal."""
        self.root = tk.Tk()
        self.root.title("üé• Visor Universal de C√°maras - M√≥dulo Principal")
        self.root.geometry("1600x1000")
        self.root.minsize(1200, 700)
        
        # Configurar icono de la ventana (si existe)
        try:
            # Intentar cargar icono
            icon_path = Path("assets/icon.ico")
            if icon_path.exists():
                self.root.iconbitmap(str(icon_path))
        except Exception:
            pass  # Continuar sin icono si no se puede cargar
        
        # Centrar ventana
        self._center_window()
        
        # Configurar colores
        self.root.configure(bg='#f8f9fa')
        
        self.logger.info("üñºÔ∏è Ventana principal creada y configurada")
    
    def _center_window(self):
        """Centra la ventana en la pantalla."""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def _setup_styles(self):
        """Configura los estilos visuales de la aplicaci√≥n."""
        self.style = ttk.Style()
        
        # Intentar usar tema moderno
        try:
            available_themes = self.style.theme_names()
            if 'clam' in available_themes:
                self.style.theme_use('clam')
            elif 'alt' in available_themes:
                self.style.theme_use('alt')
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è No se pudo configurar tema: {e}")
        
        # Configurar estilos personalizados
        self.style.configure('Title.TLabel', font=('Arial', 14, 'bold'), foreground='#2c3e50')
        self.style.configure('Subtitle.TLabel', font=('Arial', 10), foreground='#34495e')
        self.style.configure('Header.TLabel', font=('Arial', 12, 'bold'), foreground='#27ae60')
        self.style.configure('Status.TLabel', font=('Arial', 9), foreground='#7f8c8d')
        self.style.configure('Accent.TButton', font=('Arial', 9, 'bold'))
        
        self.logger.info("üé® Estilos visuales configurados")
    
    def _create_main_interface(self):
        """Crea la interfaz principal de la aplicaci√≥n."""
        # Header principal
        self._create_header()
        
        # Contenedor principal
        self.main_container = ttk.Frame(self.root)
        self.main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Crear el visor mejorado
        self._create_enhanced_viewer()
        
        # Footer con informaci√≥n
        self._create_footer()
    
    def _create_header(self):
        """Crea el header principal con informaci√≥n de la aplicaci√≥n."""
        header_frame = ttk.Frame(self.root)
        header_frame.pack(fill=tk.X, padx=10, pady=(10, 5))
        
        # T√≠tulo principal
        title_label = ttk.Label(
            header_frame,
            text="üé• Visor Universal de C√°maras",
            style='Title.TLabel'
        )
        title_label.pack(side=tk.LEFT)
        
        # Informaci√≥n de versi√≥n
        version_label = ttk.Label(
            header_frame,
            text="v0.2.0 - Sistema Profesional Multi-marca",
            style='Subtitle.TLabel'
        )
        version_label.pack(side=tk.LEFT, padx=(10, 0))
        
        # Botones de acci√≥n r√°pida
        actions_frame = ttk.Frame(header_frame)
        actions_frame.pack(side=tk.RIGHT)
        
        ttk.Button(
            actions_frame,
            text="‚ÑπÔ∏è Acerca de",
            command=self._show_about,
            width=12
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            actions_frame,
            text="üìã Logs",
            command=self._show_logs,
            width=10
        ).pack(side=tk.LEFT, padx=2)
        
        # Separador
        separator = ttk.Separator(self.root, orient='horizontal')
        separator.pack(fill=tk.X, padx=10, pady=2)
    
    def _create_enhanced_viewer(self):
        """Crea el visor mejorado con todas las funcionalidades UX."""
        try:
            # Importar el visor mejorado
            from src.viewer.real_time_viewer import RealTimeViewer
            
            # Crear el visor con todas las mejoras UX
            self.viewer = RealTimeViewer(parent_container=self.main_container)
            
            # El visor se empaqueta autom√°ticamente en su constructor
            self.logger.info("‚úÖ Visor mejorado creado e integrado")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error creando visor mejorado: {e}")
            self._show_error_fallback(str(e))
    
    def _show_error_fallback(self, error_msg: str):
        """Muestra una interfaz de fallback en caso de error."""
        error_frame = ttk.Frame(self.main_container)
        error_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Mensaje de error
        error_label = ttk.Label(
            error_frame,
            text="‚ùå Error al cargar el visor principal",
            style='Title.TLabel',
            foreground='#e74c3c'
        )
        error_label.pack(pady=10)
        
        # Detalles del error
        details_label = ttk.Label(
            error_frame,
            text=f"Detalles: {error_msg}",
            style='Subtitle.TLabel'
        )
        details_label.pack(pady=5)
        
        # Bot√≥n para reintentar
        retry_btn = ttk.Button(
            error_frame,
            text="üîÑ Reintentar",
            command=self._retry_viewer_creation,
            style='Accent.TButton'
        )
        retry_btn.pack(pady=10)
    
    def _retry_viewer_creation(self):
        """Reintenta crear el visor."""
        # Limpiar contenedor
        for widget in self.main_container.winfo_children():
            widget.destroy()
        
        # Reintentar creaci√≥n
        self._create_enhanced_viewer()
    
    def _create_footer(self):
        """Crea el footer con informaci√≥n de estado."""
        footer_frame = ttk.Frame(self.root)
        footer_frame.pack(fill=tk.X, padx=10, pady=(5, 10))
        
        # Separador
        separator = ttk.Separator(footer_frame, orient='horizontal')
        separator.pack(fill=tk.X, pady=(0, 5))
        
        # Informaci√≥n de estado
        status_frame = ttk.Frame(footer_frame)
        status_frame.pack(fill=tk.X)
        
        # Estado de la aplicaci√≥n
        self.status_label = ttk.Label(
            status_frame,
            text="üü¢ Sistema inicializado correctamente",
            style='Status.TLabel'
        )
        self.status_label.pack(side=tk.LEFT)
        
        # Informaci√≥n del sistema
        system_info = f"Python {sys.version_info.major}.{sys.version_info.minor} | Tkinter {tk.TkVersion}"
        system_label = ttk.Label(
            status_frame,
            text=system_info,
            style='Status.TLabel'
        )
        system_label.pack(side=tk.RIGHT)
    
    def _setup_events(self):
        """Configura los eventos de la aplicaci√≥n."""
        # Evento de cierre
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
        
        # Shortcuts globales
        self.root.bind('<F1>', lambda e: self._show_help())
        self.root.bind('<Control-q>', lambda e: self._on_closing())
        self.root.bind('<Control-l>', lambda e: self._show_logs())
        
        self.logger.info("‚å®Ô∏è Eventos y shortcuts configurados")
    
    def _show_about(self):
        """Muestra informaci√≥n sobre la aplicaci√≥n."""
        about_text = """üé• Visor Universal de C√°maras v0.2.0

Sistema profesional de videovigilancia multi-marca con mejoras UX avanzadas.

‚ú® Caracter√≠sticas principales:
‚Ä¢ Interfaz moderna con iconos y tooltips
‚Ä¢ Panel de control completo con pesta√±as
‚Ä¢ Soporte multi-marca (Dahua, TP-Link, Steren, Generic)
‚Ä¢ Configuraci√≥n desde archivo .env
‚Ä¢ Shortcuts de teclado completos
‚Ä¢ M√©tricas en tiempo real (FPS, latencia, uptime)
‚Ä¢ Sistema de layouts adaptativos
‚Ä¢ Feedback visual mejorado
‚Ä¢ Logging detallado para diagn√≥stico

üèóÔ∏è Arquitectura:
‚Ä¢ Principios SOLID y Clean Code
‚Ä¢ Patr√≥n MVC con separaci√≥n de responsabilidades
‚Ä¢ Sistema modular y extensible
‚Ä¢ Manejo robusto de errores

üë®‚Äçüíª Desarrollado con Python + Tkinter
üìÖ Versi√≥n: 0.2.0 - Junio 2025"""
        
        messagebox.showinfo("Acerca de - Visor Universal", about_text)
    
    def _show_logs(self):
        """Abre una ventana para mostrar los logs."""
        try:
            log_window = tk.Toplevel(self.root)
            log_window.title("üìã Logs del Sistema")
            log_window.geometry("800x600")
            
            # Crear √°rea de texto con scroll
            text_frame = ttk.Frame(log_window)
            text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            text_widget = tk.Text(text_frame, wrap=tk.WORD, font=('Courier', 9))
            scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=text_widget.yview)
            text_widget.configure(yscrollcommand=scrollbar.set)
            
            text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            # Cargar logs
            try:
                log_file = Path("logs/universal_visor.log")
                if log_file.exists():
                    with open(log_file, 'r', encoding='utf-8') as f:
                        text_widget.insert(tk.END, f.read())
                else:
                    text_widget.insert(tk.END, "No se encontraron logs.")
            except Exception as e:
                text_widget.insert(tk.END, f"Error cargando logs: {e}")
            
            # Ir al final del texto
            text_widget.see(tk.END)
            
        except Exception as e:
            messagebox.showerror("Error", f"No se pudieron mostrar los logs:\n{e}")
    
    def _show_help(self):
        """Muestra la ayuda de la aplicaci√≥n."""
        help_text = """üÜò Ayuda - Visor Universal de C√°maras

‚å®Ô∏è Shortcuts de Teclado:
‚Ä¢ F1: Mostrar esta ayuda
‚Ä¢ F5: Conectar todas las c√°maras
‚Ä¢ F6: Desconectar todas las c√°maras
‚Ä¢ F8: Capturar todas las c√°maras
‚Ä¢ F9: Refrescar vista
‚Ä¢ Ctrl+S: Guardar configuraci√≥n
‚Ä¢ Ctrl+O: Cargar configuraci√≥n
‚Ä¢ Ctrl+L: Mostrar logs
‚Ä¢ Ctrl+Q: Salir de la aplicaci√≥n

üéØ Uso B√°sico:
1. Las c√°maras se cargan autom√°ticamente desde el archivo .env
2. Usa los botones de la barra superior para acciones globales
3. Cada c√°mara tiene sus propios controles individuales
4. El panel inferior permite configurar c√°maras y layouts

üìã Panel de Control:
‚Ä¢ Pesta√±a C√°maras: Agregar, editar, eliminar c√°maras
‚Ä¢ Pesta√±a Layout: Configurar disposici√≥n en pantalla
‚Ä¢ Pesta√±a Configuraci√≥n: Ajustes generales del sistema

üîß Soluci√≥n de Problemas:
‚Ä¢ Revisa los logs (Ctrl+L) para diagn√≥stico
‚Ä¢ Verifica la conectividad de red a las c√°maras
‚Ä¢ Confirma credenciales en el archivo .env
‚Ä¢ Usa "Probar Conexi√≥n" en el panel de control"""
        
        messagebox.showinfo("Ayuda - Visor Universal", help_text)
    
    def _on_closing(self):
        """Maneja el cierre de la aplicaci√≥n."""
        try:
            self.logger.info("üîÑ Cerrando aplicaci√≥n...")
            
            # Cerrar el visor si existe
            if hasattr(self, 'viewer') and self.viewer:
                self.viewer.cleanup()
            
            # Cerrar ventana principal
            self.root.quit()
            self.root.destroy()
            
            self.logger.info("‚úÖ Aplicaci√≥n cerrada correctamente")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error cerrando aplicaci√≥n: {e}")
        finally:
            sys.exit(0)
    
    def run(self):
        """Ejecuta la aplicaci√≥n principal."""
        try:
            self.logger.info("üöÄ Iniciando bucle principal de la aplicaci√≥n...")
            self.root.mainloop()
        except KeyboardInterrupt:
            self.logger.info("‚ö†Ô∏è Aplicaci√≥n interrumpida por usuario")
            self._on_closing()
        except Exception as e:
            self.logger.error(f"‚ùå Error en bucle principal: {e}")
            messagebox.showerror("Error Cr√≠tico", f"Error inesperado:\n{e}")
            self._on_closing()

def main():
    """Funci√≥n principal de entrada."""
    try:
        # Verificar dependencias b√°sicas
        required_modules = ['tkinter', 'PIL', 'cv2', 'dotenv']
        missing_modules = []
        
        for module in required_modules:
            try:
                if module == 'PIL':
                    import PIL
                elif module == 'cv2':
                    import cv2
                elif module == 'dotenv':
                    import dotenv
                else:
                    __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            print(f"‚ùå M√≥dulos faltantes: {', '.join(missing_modules)}")
            print("üì¶ Instala las dependencias con: pip install -r requirements.txt")
            sys.exit(1)
        
        # Crear y ejecutar aplicaci√≥n
        app = UniversalVisorApp()
        app.run()
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("üì¶ Aseg√∫rate de que todas las dependencias est√©n instaladas")
        print("üí° Ejecuta: pip install -r requirements.txt")
        sys.exit(1)
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        logging.exception("Error cr√≠tico en aplicaci√≥n principal")
        sys.exit(1)

if __name__ == "__main__":
    main() 