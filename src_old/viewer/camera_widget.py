"""
Widget individual para mostrar el stream de una c√°mara en tiempo real.
Incluye controles b√°sicos y informaci√≥n de estado.
"""

import tkinter as tk
from tkinter import ttk, messagebox
import cv2
from PIL import Image, ImageTk
import threading
import time
import logging
from typing import Optional, Dict, Any, Callable
import sys
from pathlib import Path

# Asegurar que el directorio ra√≠z del proyecto est√© en el path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.connections.base_connection import BaseConnection, ConnectionFactory
from src.connections.rtsp_connection import RTSPConnection
from src.connections.amcrest_connection import AmcrestConnection
from src.connections.onvif_connection import ONVIFConnection

# cspell:disable
class CameraWidget:
    """
    Widget para mostrar el stream de una c√°mara individual.
    Maneja la conexi√≥n, visualizaci√≥n y controles b√°sicos.
    """
    
    def __init__(self, parent: tk.Widget, camera_config: Dict[str, Any], on_status_change: Optional[Callable] = None):
        """
        Inicializa el widget de c√°mara.
        
        Args:
            parent: Widget padre donde se insertar√° el widget
            camera_config: Configuraci√≥n de la c√°mara (IP, credenciales, etc.)
            on_status_change: Callback cuando cambia el estado de la c√°mara
        """
        self.parent = parent
        self.camera_config = camera_config
        self.on_status_change = on_status_change
        self.connection: Optional[BaseConnection] = None
        self.is_streaming = False
        self.stream_thread: Optional[threading.Thread] = None
        self.current_frame = None
        self.fps_counter = 0
        self.fps_start_time = time.time()
        self.current_fps = 0
        self.connection_start_time = None
        self.bytes_received = 0
        self.last_frame_time = time.time()
        
        # Configurar logging
        self.logger = logging.getLogger(f"CameraWidget_{camera_config.get('name', 'Unknown')}")
        
        # Crear interfaz
        self._create_ui()
        
        # Estado inicial
        self._update_status("Desconectado", "üî¥")
        self._clear_video_canvas("initial")
    
    def _create_ui(self):
        """
        Crea la interfaz gr√°fica del widget de c√°mara.
        """
        # Frame principal del widget con estilo mejorado
        camera_name = self.camera_config.get('name', 'Sin nombre')
        camera_brand = self.camera_config.get('brand', 'generic').upper()
        
        self.main_frame = ttk.LabelFrame(
            self.parent, 
            text=f"üìπ {camera_name} ({camera_brand})"
        )
        self.main_frame.grid(sticky="nsew")
        
        # Configurar expansi√≥n del frame principal
        self.main_frame.grid_rowconfigure(1, weight=1)
        self.main_frame.grid_columnconfigure(0, weight=1)
        
        # Frame superior con informaci√≥n y controles
        self.info_frame = ttk.Frame(self.main_frame)
        self.info_frame.grid(row=0, column=0, sticky="ew", padx=5, pady=3)
        self.info_frame.grid_columnconfigure(0, weight=1)
        
        # Panel de informaci√≥n (lado izquierdo)
        info_left = ttk.Frame(self.info_frame)
        info_left.grid(row=0, column=0, sticky="w")
        
        # Informaci√≥n b√°sica con iconos
        self.ip_label = ttk.Label(
            info_left, 
            text=f"üåê {self.camera_config.get('ip', 'N/A')}",
            font=("Arial", 9)
        )
        self.ip_label.grid(row=0, column=0, sticky="w", padx=2)
        
        self.status_label = ttk.Label(
            info_left, 
            text="üî¥ Desconectado",
            font=("Arial", 9, "bold")
        )
        self.status_label.grid(row=0, column=1, sticky="w", padx=10)
        
        # M√©tricas en tiempo real
        metrics_frame = ttk.Frame(info_left)
        metrics_frame.grid(row=1, column=0, columnspan=2, sticky="w", pady=2)
        
        self.fps_label = ttk.Label(
            metrics_frame, 
            text="üìä 0.0 FPS",
            font=("Arial", 8)
        )
        self.fps_label.grid(row=0, column=0, sticky="w", padx=2)
        
        self.latency_label = ttk.Label(
            metrics_frame, 
            text="‚è±Ô∏è 0ms",
            font=("Arial", 8)
        )
        self.latency_label.grid(row=0, column=1, sticky="w", padx=5)
        
        self.uptime_label = ttk.Label(
            metrics_frame, 
            text="üïê 00:00:00",
            font=("Arial", 8)
        )
        self.uptime_label.grid(row=0, column=2, sticky="w", padx=5)
        
        self.quality_label = ttk.Label(
            metrics_frame, 
            text="üì∫ N/A",
            font=("Arial", 8)
        )
        self.quality_label.grid(row=0, column=3, sticky="w", padx=5)
        
        # Panel de controles (lado derecho)
        controls_frame = ttk.Frame(self.info_frame)
        controls_frame.grid(row=0, column=1, sticky="e", padx=5)
        
        # Botones con iconos y estilos
        self.connect_btn = ttk.Button(
            controls_frame, 
            text="üîó Conectar", 
            command=self._toggle_connection,
            width=12
        )
        self.connect_btn.grid(row=0, column=0, padx=2)
        self._add_tooltip(self.connect_btn, "Conectar/desconectar c√°mara")
        
        self.snapshot_btn = ttk.Button(
            controls_frame, 
            text="üì∏ Capturar", 
            command=self._take_snapshot,
            state=tk.DISABLED,
            width=12
        )
        self.snapshot_btn.grid(row=0, column=1, padx=2)
        self._add_tooltip(self.snapshot_btn, "Capturar snapshot HD")
        
        self.settings_btn = ttk.Button(
            controls_frame, 
            text="‚öôÔ∏è Config", 
            command=self._show_settings,
            width=10
        )
        self.settings_btn.grid(row=0, column=2, padx=2)
        self._add_tooltip(self.settings_btn, "Configuraci√≥n de c√°mara")
        
        # Botones adicionales en segunda fila
        controls_frame2 = ttk.Frame(self.info_frame)
        controls_frame2.grid(row=1, column=1, sticky="e", padx=5, pady=2)
        
        self.refresh_btn = ttk.Button(
            controls_frame2, 
            text="üîÑ Refrescar", 
            command=self._refresh_connection,
            width=12
        )
        self.refresh_btn.grid(row=0, column=0, padx=2)
        self._add_tooltip(self.refresh_btn, "Refrescar conexi√≥n")
        
        self.info_btn = ttk.Button(
            controls_frame2, 
            text="‚ÑπÔ∏è Info", 
            command=self._show_camera_info,
            width=10
        )
        self.info_btn.grid(row=0, column=1, padx=2)
        self._add_tooltip(self.info_btn, "Informaci√≥n detallada")
        
        # Separador visual
        ttk.Separator(self.main_frame, orient=tk.HORIZONTAL).grid(
            row=1, column=0, sticky="ew", padx=5, pady=2
        )
        
        # Frame para el video con borde mejorado
        self.video_frame = ttk.Frame(self.main_frame)
        self.video_frame.grid(row=2, column=0, sticky="nsew", padx=5, pady=5)
        self.video_frame.grid_rowconfigure(0, weight=1)
        self.video_frame.grid_columnconfigure(0, weight=1)
        
        # Canvas para mostrar el video con mejor estilo
        self.video_canvas = tk.Canvas(
            self.video_frame, 
            width=320, 
            height=240, 
            bg='#2c3e50',
            highlightthickness=2,
            highlightbackground="#34495e",
            relief=tk.FLAT
        )
        self.video_canvas.grid(row=0, column=0, sticky="nsew")
        
        # Bind eventos del canvas
        self.video_canvas.bind("<Button-1>", self._on_canvas_click)
        self.video_canvas.bind("<Double-Button-1>", self._on_canvas_double_click)
        
        # Barra de estado inferior
        self.status_frame = ttk.Frame(self.main_frame)
        self.status_frame.grid(row=3, column=0, sticky="ew", padx=5, pady=2)
        self.status_frame.grid_columnconfigure(1, weight=1)
        
        # Indicador de estado de conexi√≥n
        self.connection_indicator = ttk.Label(
            self.status_frame,
            text="‚ö™",
            font=("Arial", 12)
        )
        self.connection_indicator.grid(row=0, column=0, padx=2)
        
        # URL de conexi√≥n (censurada)
        self.url_label = ttk.Label(
            self.status_frame, 
            text="üîó No conectado",
            font=("Courier", 8),
            foreground="#7f8c8d"
        )
        self.url_label.grid(row=0, column=1, sticky="w", padx=5)
        
        # Indicador de calidad de se√±al
        self.signal_indicator = ttk.Label(
            self.status_frame,
            text="üì∂",
            font=("Arial", 10)
        )
        self.signal_indicator.grid(row=0, column=2, padx=2)
    
    def _add_tooltip(self, widget, text):
        """
        Agrega un tooltip a un widget.
        
        Args:
            widget: Widget al que agregar el tooltip
            text: Texto del tooltip
        """
        def on_enter(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            
            label = ttk.Label(
                tooltip,
                text=text,
                background="#ffffe0",
                relief="solid",
                borderwidth=1,
                font=("Arial", 8)
            )
            label.pack()
            
            widget.tooltip = tooltip
        
        def on_leave(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
                del widget.tooltip
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)
    
    def _on_canvas_click(self, event):
        """Maneja click simple en el canvas."""
        if self.is_streaming:
            self._take_snapshot()
    
    def _on_canvas_double_click(self, event):
        """Maneja doble click en el canvas."""
        self._show_fullscreen()
    
    def _show_fullscreen(self):
        """Muestra el video en pantalla completa (placeholder)."""
        messagebox.showinfo("Pantalla Completa", "Funci√≥n de pantalla completa pr√≥ximamente disponible")
    
    def _show_settings(self):
        """Muestra di√°logo de configuraci√≥n de la c√°mara."""
        settings_window = tk.Toplevel(self.main_frame)
        settings_window.title(f"‚öôÔ∏è Configuraci√≥n - {self.camera_config.get('name', 'C√°mara')}")
        settings_window.geometry("400x300")
        settings_window.resizable(False, False)
        
        # Centrar ventana
        settings_window.transient(self.main_frame)
        settings_window.grab_set()
        
        # Informaci√≥n de configuraci√≥n
        info_frame = ttk.LabelFrame(settings_window, text="üìã Informaci√≥n de Configuraci√≥n")
        info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        config_text = f"""
üé• Nombre: {self.camera_config.get('name', 'N/A')}
üåê IP: {self.camera_config.get('ip', 'N/A')}
üë§ Usuario: {self.camera_config.get('username', 'N/A')}
üîß Protocolo: {self.camera_config.get('type', 'N/A').upper()}
üè∑Ô∏è Marca: {self.camera_config.get('brand', 'N/A').upper()}
üîå Puerto ONVIF: {self.camera_config.get('onvif_port', 'N/A')}
üì° Puerto RTSP: {self.camera_config.get('rtsp_port', 'N/A')}
        """
        
        config_label = ttk.Label(info_frame, text=config_text, font=("Arial", 10), justify=tk.LEFT)
        config_label.pack(padx=10, pady=10)
        
        # Bot√≥n cerrar
        close_button = ttk.Button(settings_window, text="Cerrar", command=settings_window.destroy)
        close_button.pack(pady=10)
    
    def _show_camera_info(self):
        """Muestra informaci√≥n detallada de la c√°mara."""
        info_window = tk.Toplevel(self.main_frame)
        info_window.title(f"‚ÑπÔ∏è Informaci√≥n - {self.camera_config.get('name', 'C√°mara')}")
        info_window.geometry("500x400")
        info_window.resizable(True, True)
        
        # Centrar ventana
        info_window.transient(self.main_frame)
        info_window.grab_set()
        
        # Notebook para organizar informaci√≥n
        info_notebook = ttk.Notebook(info_window)
        info_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Pesta√±a de estado
        status_frame = ttk.Frame(info_notebook)
        info_notebook.add(status_frame, text="üìä Estado")
        
        status_info = f"""
ESTADO DE CONEXI√ìN:
üîó Estado: {'Conectado' if self.is_streaming else 'Desconectado'}
üìä FPS Actual: {self.current_fps:.1f}
‚è±Ô∏è Tiempo Conectado: {self._get_uptime()}
üì∫ Resoluci√≥n: {self._get_resolution()}
üîÑ Frames Procesados: {self.fps_counter}

M√âTRICAS DE RED:
üåê Latencia: {self._get_latency()}ms
üì° Calidad Se√±al: {self._get_signal_quality()}
üíæ Datos Recibidos: {self._format_bytes(self.bytes_received)}
        """
        
        status_label = ttk.Label(status_frame, text=status_info, font=("Courier", 10), justify=tk.LEFT)
        status_label.pack(padx=10, pady=10)
        
        # Pesta√±a de configuraci√≥n
        config_frame = ttk.Frame(info_notebook)
        info_notebook.add(config_frame, text="‚öôÔ∏è Configuraci√≥n")
        
        config_info = f"""
CONFIGURACI√ìN DE C√ÅMARA:
üìπ Nombre: {self.camera_config.get('name', 'N/A')}
üåê Direcci√≥n IP: {self.camera_config.get('ip', 'N/A')}
üë§ Usuario: {self.camera_config.get('username', 'N/A')}
üîí Contrase√±a: {'***' if self.camera_config.get('password') else 'No configurada'}
üîß Protocolo: {self.camera_config.get('type', 'N/A').upper()}
üè∑Ô∏è Marca: {self.camera_config.get('brand', 'N/A').upper()}
üîå Puerto ONVIF: {self.camera_config.get('onvif_port', 'N/A')}
üì° Puerto RTSP: {self.camera_config.get('rtsp_port', 'N/A')}

URL DE CONEXI√ìN:
{self._get_connection_url()}
        """
        
        config_label = ttk.Label(config_frame, text=config_info, font=("Courier", 9), justify=tk.LEFT)
        config_label.pack(padx=10, pady=10)
        
        # Bot√≥n cerrar
        close_button = ttk.Button(info_window, text="Cerrar", command=info_window.destroy)
        close_button.pack(pady=10)
    
    def _refresh_connection(self):
        """Refresca la conexi√≥n de la c√°mara."""
        if self.is_streaming:
            self._disconnect()
            # Peque√±a pausa antes de reconectar
            self.main_frame.after(1000, self._connect)
        else:
            self._connect()
    
    def _get_uptime(self) -> str:
        """Obtiene el tiempo de conexi√≥n formateado."""
        if not self.connection_start_time:
            return "00:00:00"
        
        uptime_seconds = int(time.time() - self.connection_start_time)
        hours = uptime_seconds // 3600
        minutes = (uptime_seconds % 3600) // 60
        seconds = uptime_seconds % 60
        
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    
    def _get_resolution(self) -> str:
        """Obtiene la resoluci√≥n actual del video."""
        if self.current_frame is not None:
            height, width = self.current_frame.shape[:2]
            return f"{width}x{height}"
        return "N/A"
    
    def _get_latency(self) -> int:
        """Calcula la latencia aproximada."""
        if self.is_streaming and self.last_frame_time:
            return int((time.time() - self.last_frame_time) * 1000)
        return 0
    
    def _get_signal_quality(self) -> str:
        """Determina la calidad de la se√±al basada en FPS."""
        if self.current_fps >= 15:
            return "Excelente"
        elif self.current_fps >= 10:
            return "Buena"
        elif self.current_fps >= 5:
            return "Regular"
        elif self.current_fps > 0:
            return "Pobre"
        else:
            return "Sin se√±al"
    
    def _format_bytes(self, bytes_count: int) -> str:
        """Formatea bytes en unidades legibles."""
        if bytes_count < 1024:
            return f"{bytes_count} B"
        elif bytes_count < 1024 * 1024:
            return f"{bytes_count / 1024:.1f} KB"
        elif bytes_count < 1024 * 1024 * 1024:
            return f"{bytes_count / (1024 * 1024):.1f} MB"
        else:
            return f"{bytes_count / (1024 * 1024 * 1024):.1f} GB"
    
    def _toggle_connection(self):
        """
        Alterna entre conectar y desconectar la c√°mara.
        """
        if self.is_streaming:
            self._disconnect()
        else:
            self._connect()
    
    def _connect(self):
        """
        Establece conexi√≥n con la c√°mara y comienza el streaming.
        """
        try:
            self.logger.info("Iniciando conexi√≥n con la c√°mara")
            self._update_status("Conectando...", "üü°")
            self._notify_status_change("connecting")
            
            # Crear conexi√≥n usando ConnectionFactory
            connection_type = self.camera_config.get('type', 'onvif')  # ONVIF por defecto
            camera_brand = self.camera_config.get('brand', 'dahua')  # Dahua por defecto
            
            # Crear ConfigurationManager din√°mico
            from src.utils.config import ConfigurationManager
            
            # Crear config manager temporal con datos de la c√°mara
            temp_config = ConfigurationManager()
            
            # Configurar seg√∫n la marca
            if camera_brand.lower() == 'tplink':
                temp_config.tplink_ip = self.camera_config['ip']
                temp_config.tplink_user = self.camera_config.get('username', 'admin')
                temp_config.tplink_password = self.camera_config.get('password', '')
                temp_config.onvif_port = self.camera_config.get('onvif_port', 2020)
            else:  # Dahua por defecto
                temp_config.camera_ip = self.camera_config['ip']
                temp_config.camera_user = self.camera_config.get('username', 'admin')
                temp_config.camera_password = self.camera_config.get('password', '')
                temp_config.onvif_port = self.camera_config.get('onvif_port', 80)
            
            # Usar ConnectionFactory para crear la conexi√≥n
            self.connection = ConnectionFactory.create_connection(
                connection_type=connection_type,
                config_manager=temp_config,
                camera_brand=camera_brand
            )
            
            # Intentar conectar
            if self.connection.connect():
                self.is_streaming = True
                self.connection_start_time = time.time()
                self._update_status("Conectado", "üü¢")
                self._update_connection_url()
                self._notify_status_change("connected")
                
                # Actualizar controles
                self.connect_btn.config(text="üîå Desconectar")
                self.snapshot_btn.config(state=tk.NORMAL)
                
                # Iniciar thread de streaming
                self.stream_thread = threading.Thread(target=self._stream_worker, daemon=True)
                self.stream_thread.start()
                
                self.logger.info("Conexi√≥n establecida exitosamente")
            else:
                self._update_status("Error de conexi√≥n", "üî¥")
                self._update_connection_url()
                self._clear_video_canvas("error")
                self._notify_status_change("error")
                messagebox.showerror("Error", "No se pudo conectar a la c√°mara")
                
        except Exception as e:
            self.logger.error(f"Error al conectar: {str(e)}")
            self._update_status("Error", "üî¥")
            self._clear_video_canvas("error")
            self._notify_status_change("error")
            messagebox.showerror("Error de Conexi√≥n", f"Error al conectar:\n{str(e)}")
    
    def _notify_status_change(self, status: str):
        """
        Notifica cambio de estado al callback padre.
        
        Args:
            status: Nuevo estado de la c√°mara
        """
        if self.on_status_change:
            try:
                camera_name = self.camera_config.get('name', 'C√°mara')
                self.on_status_change(camera_name, status)
            except Exception as e:
                self.logger.error(f"Error notificando cambio de estado: {e}")
    
    def is_connected(self) -> bool:
        """
        Verifica si la c√°mara est√° conectada.
        
        Returns:
            True si est√° conectada, False en caso contrario
        """
        return self.is_streaming and self.connection is not None
    
    def get_fps(self) -> float:
        """
        Obtiene el FPS actual de la c√°mara.
        
        Returns:
            FPS actual
        """
        return self.current_fps
    
    def _stream_worker(self):
        """
        Worker thread para el streaming de video.
        """
        self.logger.info("Iniciando worker de streaming")
        
        while self.is_streaming and self.connection:
            try:
                # Obtener frame
                frame = self.connection.get_frame()
                
                if frame is not None:
                    self.current_frame = frame
                    self.last_frame_time = time.time()
                    
                    # Actualizar contador de bytes (estimado)
                    self.bytes_received += frame.nbytes if hasattr(frame, 'nbytes') else len(frame.tobytes())
                    
                    # Mostrar frame en el canvas
                    self._display_frame(frame)
                    
                    # Actualizar FPS
                    self._update_fps()
                    
                    # Actualizar m√©tricas cada 30 frames
                    if self.fps_counter % 30 == 0:
                        self._update_metrics_display()
                else:
                    # Si no hay frame, peque√±a pausa para evitar uso excesivo de CPU
                    time.sleep(0.01)
                    
            except Exception as e:
                self.logger.error(f"Error en streaming: {str(e)}")
                if self.is_streaming:  # Solo mostrar error si a√∫n deber√≠amos estar streaming
                    self._update_status("Error de stream", "üî¥")
                    self._clear_video_canvas("stream_error")
                break
        
        self.logger.info("Worker de streaming finalizado")
    
    def _display_frame(self, frame):
        """
        Muestra un frame en el canvas de video.
        
        Args:
            frame: Frame de OpenCV a mostrar
        """
        try:
            # Obtener dimensiones del canvas
            canvas_width = self.video_canvas.winfo_width()
            canvas_height = self.video_canvas.winfo_height()
            
            # Si el canvas a√∫n no tiene dimensiones, usar valores por defecto
            if canvas_width <= 1 or canvas_height <= 1:
                canvas_width = 320
                canvas_height = 240
            
            # Redimensionar frame manteniendo aspecto
            frame_height, frame_width = frame.shape[:2]
            
            # Calcular escala manteniendo aspecto
            scale_w = canvas_width / frame_width
            scale_h = canvas_height / frame_height
            scale = min(scale_w, scale_h)
            
            new_width = int(frame_width * scale)
            new_height = int(frame_height * scale)
            
            # Redimensionar frame
            resized_frame = cv2.resize(frame, (new_width, new_height))
            
            # Convertir de BGR a RGB
            rgb_frame = cv2.cvtColor(resized_frame, cv2.COLOR_BGR2RGB)
            
            # Convertir a PIL Image
            pil_image = Image.fromarray(rgb_frame)
            
            # Convertir a PhotoImage
            photo = ImageTk.PhotoImage(pil_image)
            
            # Calcular posici√≥n centrada
            x = (canvas_width - new_width) // 2
            y = (canvas_height - new_height) // 2
            
            # Mostrar en canvas (usar after para thread safety)
            self.video_canvas.after(0, lambda: self._update_canvas_image(photo, x, y))
            
        except Exception as e:
            self.logger.error(f"Error mostrando frame: {str(e)}")
    
    def _update_canvas_image(self, photo, x, y):
        """
        Actualiza la imagen en el canvas (thread-safe).
        
        Args:
            photo: PhotoImage a mostrar
            x, y: Posici√≥n donde mostrar la imagen
        """
        try:
            # Limpiar canvas
            self.video_canvas.delete("all")
            
            # Mostrar nueva imagen
            self.video_canvas.create_image(x, y, anchor=tk.NW, image=photo)
            
            # Mantener referencia para evitar garbage collection
            self.video_canvas.image = photo
            
        except Exception as e:
            self.logger.error(f"Error actualizando canvas: {str(e)}")
    
    def _update_fps(self):
        """
        Actualiza el contador de FPS.
        """
        self.fps_counter += 1
        
        # Calcular FPS cada segundo
        current_time = time.time()
        if current_time - self.fps_start_time >= 1.0:
            self.current_fps = self.fps_counter / (current_time - self.fps_start_time)
            self.fps_counter = 0
            self.fps_start_time = current_time
            
            # Actualizar label de FPS
            self.fps_label.after(0, lambda: self.fps_label.config(text=f"üìä {self.current_fps:.1f} FPS"))
    
    def _update_metrics_display(self):
        """
        Actualiza la visualizaci√≥n de m√©tricas en tiempo real.
        """
        try:
            # Actualizar latencia
            latency = self._get_latency()
            self.latency_label.after(0, lambda: self.latency_label.config(text=f"‚è±Ô∏è {latency}ms"))
            
            # Actualizar tiempo de conexi√≥n
            uptime = self._get_uptime()
            self.uptime_label.after(0, lambda: self.uptime_label.config(text=f"üïê {uptime}"))
            
            # Actualizar calidad
            quality = self._get_signal_quality()
            self.quality_label.after(0, lambda: self.quality_label.config(text=f"üì∫ {quality}"))
            
            # Actualizar indicadores de estado
            self._update_status_indicators()
            
        except Exception as e:
            self.logger.error(f"Error actualizando m√©tricas: {e}")
    
    def _update_status_indicators(self):
        """
        Actualiza los indicadores visuales de estado.
        """
        try:
            # Indicador de conexi√≥n
            if self.is_streaming:
                if self.current_fps > 10:
                    indicator = "üü¢"  # Verde - excelente
                elif self.current_fps > 5:
                    indicator = "üü°"  # Amarillo - regular
                else:
                    indicator = "üî¥"  # Rojo - pobre
            else:
                indicator = "‚ö™"  # Blanco - desconectado
            
            self.connection_indicator.after(0, lambda: self.connection_indicator.config(text=indicator))
            
            # Indicador de calidad de se√±al
            quality = self._get_signal_quality()
            if quality == "Excelente":
                signal = "üì∂"
            elif quality == "Buena":
                signal = "üì∂"
            elif quality == "Regular":
                signal = "üì∂"
            elif quality == "Pobre":
                signal = "üì∂"
            else:
                signal = "üìµ"
            
            self.signal_indicator.after(0, lambda: self.signal_indicator.config(text=signal))
            
        except Exception as e:
            self.logger.error(f"Error actualizando indicadores: {e}")
    
    def _update_status(self, status: str, icon: str):
        """
        Actualiza el estado mostrado en la interfaz.
        
        Args:
            status: Texto del estado
            icon: Icono del estado
        """
        self.status_label.config(text=f"{icon} {status}")
    
    def _censor_credentials(self, username: str, password: str) -> tuple:
        """
        Censura las credenciales para mostrar en la UI.
        
        Args:
            username: Nombre de usuario
            password: Contrase√±a
            
        Returns:
            Tupla con (username_censurado, password_censurado)
        """
        # Censurar username (mostrar solo primeros 2 caracteres)
        if len(username) <= 2:
            censored_username = username
        else:
            censored_username = username[:2] + "*" * (len(username) - 2)
        
        # Censurar password completamente
        censored_password = "*" * len(password) if password else ""
        
        return censored_username, censored_password
    
    def _get_connection_url(self) -> str:
        """
        Obtiene la URL de conexi√≥n actual (censurada).
        
        Returns:
            URL de conexi√≥n censurada
        """
        if not self.connection or not self.is_streaming:
            return "No conectado"
        
        try:
            # Obtener informaci√≥n b√°sica
            ip = self.camera_config.get('ip', 'N/A')
            username = self.camera_config.get('username', 'admin')
            password = self.camera_config.get('password', '')
            connection_type = self.camera_config.get('type', 'onvif')
            
            # Censurar credenciales
            censored_username, censored_password = self._censor_credentials(username, password)
            
            # Construir URL seg√∫n el tipo de conexi√≥n
            if connection_type.lower() == 'rtsp':
                rtsp_port = self.camera_config.get('rtsp_port', 554)
                if hasattr(self.connection, 'stream_url') and self.connection.stream_url:
                    # Usar URL real pero censurar credenciales
                    url = self.connection.stream_url
                    # Reemplazar credenciales reales con censuradas
                    if username in url and password in url:
                        url = url.replace(f"{username}:{password}", f"{censored_username}:{censored_password}")
                    return url
                else:
                    return f"rtsp://{censored_username}:{censored_password}@{ip}:{rtsp_port}/stream"
            
            elif connection_type.lower() == 'onvif':
                onvif_port = self.camera_config.get('onvif_port', 80)
                if hasattr(self.connection, 'stream_url') and self.connection.stream_url:
                    # ONVIF devuelve URL RTSP, censurar credenciales
                    url = self.connection.stream_url
                    if username in url and password in url:
                        url = url.replace(f"{username}:{password}", f"{censored_username}:{censored_password}")
                    return f"ONVIF:{onvif_port} -> {url}"
                else:
                    return f"ONVIF://{ip}:{onvif_port} (configurando...)"
            
            elif connection_type.lower() == 'amcrest':
                http_port = self.camera_config.get('http_port', 80)
                return f"HTTP://{censored_username}:{censored_password}@{ip}:{http_port}/cgi-bin/"
            
            else:
                return f"{connection_type.upper()}://{ip} (configurando...)"
                
        except Exception as e:
            self.logger.error(f"Error obteniendo URL de conexi√≥n: {str(e)}")
            return "Error obteniendo URL"
    
    def _update_connection_url(self):
        """
        Actualiza la URL de conexi√≥n mostrada en la interfaz.
        """
        url = self._get_connection_url()
        self.url_label.config(text=f"üîó {url}")
    
    def _clear_video_canvas(self, state: str = "initial"):
        """
        Limpia el canvas de video y muestra un mensaje seg√∫n el estado.
        
        Args:
            state: Estado actual (initial, error, disconnected, stream_error)
        """
        try:
            # Limpiar canvas
            self.video_canvas.delete("all")
            
            # Configurar mensaje y color seg√∫n el estado
            if state == "initial":
                message = "üé• Visor Universal de C√°maras\n\nüìπ Presiona 'Conectar' para iniciar\n\nüí° Click: Capturar\nüí° Doble-click: Pantalla completa"
                color = "#ecf0f1"
                bg_color = "#2c3e50"
            elif state == "error":
                message = "‚ùå Error de Conexi√≥n\n\nüîß Verifica:\n‚Ä¢ Direcci√≥n IP\n‚Ä¢ Credenciales\n‚Ä¢ Red\n\nüîÑ Presiona 'Refrescar' para reintentar"
                color = "#e74c3c"
                bg_color = "#2c3e50"
            elif state == "disconnected":
                message = "üîå Desconectado\n\n‚úÖ Desconexi√≥n exitosa\n\nüîó Presiona 'Conectar' para reconectar"
                color = "#f39c12"
                bg_color = "#2c3e50"
            elif state == "stream_error":
                message = "üì° Error de Stream\n\n‚ö†Ô∏è Problema en la transmisi√≥n\n\nüîÑ Reconectando autom√°ticamente..."
                color = "#e67e22"
                bg_color = "#2c3e50"
            else:
                message = "üìπ C√°mara Lista\n\nEsperando conexi√≥n..."
                color = "#95a5a6"
                bg_color = "#2c3e50"
            
            # Cambiar color de fondo del canvas
            self.video_canvas.config(bg=bg_color)
            
            # Obtener dimensiones del canvas
            canvas_width = self.video_canvas.winfo_width()
            canvas_height = self.video_canvas.winfo_height()
            
            if canvas_width <= 1 or canvas_height <= 1:
                canvas_width = 320
                canvas_height = 240
            
            # Crear texto centrado
            self.video_canvas.create_text(
                canvas_width // 2,
                canvas_height // 2,
                text=message,
                fill=color,
                font=("Arial", 11, "bold"),
                justify=tk.CENTER
            )
            
            # Agregar marca de agua en la esquina
            brand_text = f"{self.camera_config.get('brand', 'GENERIC').upper()}"
            self.video_canvas.create_text(
                canvas_width - 10,
                canvas_height - 10,
                text=brand_text,
                fill="#7f8c8d",
                font=("Arial", 8),
                anchor=tk.SE
            )
            
        except Exception as e:
            self.logger.error(f"Error limpiando canvas: {str(e)}")
    
    def _take_snapshot(self):
        """
        Captura un snapshot de la c√°mara.
        """
        if not self.is_streaming or not self.connection:
            messagebox.showwarning("Advertencia", "La c√°mara debe estar conectada para capturar snapshots")
            return
        
        try:
            # Usar el frame actual si est√° disponible
            if self.current_frame is not None:
                # Generar nombre de archivo con timestamp
                timestamp = time.strftime("%Y%m%d_%H%M%S")
                camera_name = self.camera_config.get('name', 'camera').replace(' ', '_')
                filename = f"snapshot_{camera_name}_{timestamp}.jpg"
                
                # Guardar imagen
                cv2.imwrite(filename, self.current_frame)
                
                # Mostrar confirmaci√≥n
                messagebox.showinfo(
                    "üì∏ Snapshot Capturado", 
                    f"‚úÖ Snapshot guardado exitosamente:\n\nüìÅ {filename}\n\nüì∫ Resoluci√≥n: {self._get_resolution()}"
                )
                
                self.logger.info(f"Snapshot capturado: {filename}")
            else:
                # Intentar capturar directamente de la conexi√≥n
                if hasattr(self.connection, 'capture_snapshot'):
                    timestamp = time.strftime("%Y%m%d_%H%M%S")
                    camera_name = self.camera_config.get('name', 'camera').replace(' ', '_')
                    filename = f"snapshot_{camera_name}_{timestamp}.jpg"
                    
                    if self.connection.capture_snapshot(filename):
                        messagebox.showinfo("üì∏ Snapshot Capturado", f"‚úÖ Snapshot guardado: {filename}")
                        self.logger.info(f"Snapshot capturado via conexi√≥n: {filename}")
                    else:
                        messagebox.showerror("Error", "‚ùå No se pudo capturar el snapshot")
                else:
                    messagebox.showerror("Error", "‚ùå No hay frame disponible para capturar")
                    
        except Exception as e:
            self.logger.error(f"Error capturando snapshot: {str(e)}")
            messagebox.showerror("Error", f"‚ùå Error al capturar snapshot:\n{str(e)}")
    
    def connect(self):
        """M√©todo p√∫blico para conectar la c√°mara."""
        if not self.is_streaming:
            self._connect()
    
    def disconnect(self):
        """M√©todo p√∫blico para desconectar la c√°mara."""
        if self.is_streaming:
            self._disconnect()
    
    def refresh(self):
        """M√©todo p√∫blico para refrescar la conexi√≥n."""
        self._refresh_connection()
    
    def capture_snapshot(self):
        """M√©todo p√∫blico para capturar snapshot."""
        self._take_snapshot()
    
    def cleanup(self):
        """
        Limpia recursos del widget.
        """
        try:
            self.logger.info("Limpiando recursos del widget de c√°mara")
            
            # Detener streaming
            if self.is_streaming:
                self._disconnect()
            
            # Limpiar canvas
            if hasattr(self, 'video_canvas'):
                self.video_canvas.delete("all")
            
            # Limpiar frame principal
            if hasattr(self, 'main_frame'):
                self.main_frame.destroy()
            
            self.logger.info("Recursos del widget limpiados correctamente")
            
        except Exception as e:
            self.logger.error(f"Error limpiando recursos del widget: {str(e)}")
    
    def grid(self, **kwargs):
        """M√©todo para posicionar el widget usando grid."""
        if hasattr(self, 'main_frame'):
            self.main_frame.grid(**kwargs)
    
    def pack(self, **kwargs):
        """M√©todo para posicionar el widget usando pack."""
        if hasattr(self, 'main_frame'):
            self.main_frame.pack(**kwargs)
    
    def _disconnect(self):
        """
        Desconecta la c√°mara y detiene el streaming.
        """
        try:
            self.logger.info("Desconectando c√°mara")
            self.is_streaming = False
            self.connection_start_time = None
            
            # Esperar a que termine el thread
            if self.stream_thread and self.stream_thread.is_alive():
                self.stream_thread.join(timeout=2)
            
            # Desconectar la conexi√≥n
            if self.connection:
                self.connection.disconnect()
                self.connection = None
            
            # Actualizar UI
            self._update_status("Desconectado", "üî¥")
            self._update_connection_url()
            self._notify_status_change("disconnected")
            
            # Actualizar controles
            self.connect_btn.config(text="üîó Conectar")
            self.snapshot_btn.config(state=tk.DISABLED)
            
            # Limpiar canvas con mensaje de desconexi√≥n manual
            self.video_canvas.after(100, lambda: self._clear_video_canvas("disconnected"))
            
            # Resetear m√©tricas
            self.current_fps = 0
            self.fps_counter = 0
            self.bytes_received = 0
            self._update_metrics_display()
            
            self.logger.info("Desconexi√≥n completada")
            
        except Exception as e:
            self.logger.error(f"Error al desconectar: {str(e)}")
    
    def _stream_worker(self):
        """
        Worker thread para el streaming de video.
        """
        self.logger.info("Iniciando worker de streaming")
        
        while self.is_streaming and self.connection:
            try:
                # Obtener frame
                frame = self.connection.get_frame()
                
                if frame is not None:
                    self.current_frame = frame
                    self.last_frame_time = time.time()
                    
                    # Actualizar contador de bytes (estimado)
                    self.bytes_received += frame.nbytes if hasattr(frame, 'nbytes') else len(frame.tobytes())
                    
                    # Mostrar frame en el canvas
                    self._display_frame(frame)
                    
                    # Actualizar FPS
                    self._update_fps()
                    
                    # Actualizar m√©tricas cada 30 frames
                    if self.fps_counter % 30 == 0:
                        self._update_metrics_display()
                else:
                    # Si no hay frame, peque√±a pausa para evitar uso excesivo de CPU
                    time.sleep(0.01)
                    
            except Exception as e:
                self.logger.error(f"Error en streaming: {str(e)}")
                if self.is_streaming:  # Solo mostrar error si a√∫n deber√≠amos estar streaming
                    self._update_status("Error de stream", "üî¥")
                    self._clear_video_canvas("stream_error")
                break
        
        self.logger.info("Worker de streaming finalizado")
    
    def _display_frame(self, frame):
        """
        Muestra un frame en el canvas de video.
        
        Args:
            frame: Frame de OpenCV a mostrar
        """
        try:
            # Obtener dimensiones del canvas
            canvas_width = self.video_canvas.winfo_width()
            canvas_height = self.video_canvas.winfo_height()
            
            # Si el canvas a√∫n no tiene dimensiones, usar valores por defecto
            if canvas_width <= 1 or canvas_height <= 1:
                canvas_width = 320
                canvas_height = 240
            
            # Redimensionar frame manteniendo aspecto
            frame_height, frame_width = frame.shape[:2]
            
            # Calcular escala manteniendo aspecto
            scale_w = canvas_width / frame_width
            scale_h = canvas_height / frame_height
            scale = min(scale_w, scale_h)
            
            new_width = int(frame_width * scale)
            new_height = int(frame_height * scale)
            
            # Redimensionar frame
            resized_frame = cv2.resize(frame, (new_width, new_height))
            
            # Convertir de BGR a RGB
            rgb_frame = cv2.cvtColor(resized_frame, cv2.COLOR_BGR2RGB)
            
            # Convertir a PIL Image
            pil_image = Image.fromarray(rgb_frame)
            
            # Convertir a PhotoImage
            photo = ImageTk.PhotoImage(pil_image)
            
            # Calcular posici√≥n centrada
            x = (canvas_width - new_width) // 2
            y = (canvas_height - new_height) // 2
            
            # Mostrar en canvas (usar after para thread safety)
            self.video_canvas.after(0, lambda: self._update_canvas_image(photo, x, y))
            
        except Exception as e:
            self.logger.error(f"Error mostrando frame: {str(e)}")
    
    def _update_canvas_image(self, photo, x, y):
        """
        Actualiza la imagen en el canvas (thread-safe).
        
        Args:
            photo: PhotoImage a mostrar
            x, y: Posici√≥n donde mostrar la imagen
        """
        try:
            # Limpiar canvas
            self.video_canvas.delete("all")
            
            # Mostrar nueva imagen
            self.video_canvas.create_image(x, y, anchor=tk.NW, image=photo)
            
            # Mantener referencia para evitar garbage collection
            self.video_canvas.image = photo
            
        except Exception as e:
            self.logger.error(f"Error actualizando canvas: {str(e)}")
    
    def _update_fps(self):
        """
        Actualiza el contador de FPS.
        """
        self.fps_counter += 1
        
        # Calcular FPS cada segundo
        current_time = time.time()
        if current_time - self.fps_start_time >= 1.0:
            self.current_fps = self.fps_counter / (current_time - self.fps_start_time)
            self.fps_counter = 0
            self.fps_start_time = current_time
            
            # Actualizar label de FPS
            self.fps_label.after(0, lambda: self.fps_label.config(text=f"üìä {self.current_fps:.1f} FPS"))
    
    def _update_metrics_display(self):
        """
        Actualiza la visualizaci√≥n de m√©tricas en tiempo real.
        """
        try:
            # Actualizar latencia
            latency = self._get_latency()
            self.latency_label.after(0, lambda: self.latency_label.config(text=f"‚è±Ô∏è {latency}ms"))
            
            # Actualizar tiempo de conexi√≥n
            uptime = self._get_uptime()
            self.uptime_label.after(0, lambda: self.uptime_label.config(text=f"üïê {uptime}"))
            
            # Actualizar calidad
            quality = self._get_signal_quality()
            self.quality_label.after(0, lambda: self.quality_label.config(text=f"üì∫ {quality}"))
            
            # Actualizar indicadores de estado
            self._update_status_indicators()
            
        except Exception as e:
            self.logger.error(f"Error actualizando m√©tricas: {e}")
    
    def _update_status_indicators(self):
        """
        Actualiza los indicadores visuales de estado.
        """
        try:
            # Indicador de conexi√≥n
            if self.is_streaming:
                if self.current_fps > 10:
                    indicator = "üü¢"  # Verde - excelente
                elif self.current_fps > 5:
                    indicator = "üü°"  # Amarillo - regular
                else:
                    indicator = "üî¥"  # Rojo - pobre
            else:
                indicator = "‚ö™"  # Blanco - desconectado
            
            self.connection_indicator.after(0, lambda: self.connection_indicator.config(text=indicator))
            
            # Indicador de calidad de se√±al
            quality = self._get_signal_quality()
            if quality == "Excelente":
                signal = "üì∂"
            elif quality == "Buena":
                signal = "üì∂"
            elif quality == "Regular":
                signal = "üì∂"
            elif quality == "Pobre":
                signal = "üì∂"
            else:
                signal = "üìµ"
            
            self.signal_indicator.after(0, lambda: self.signal_indicator.config(text=signal))
            
        except Exception as e:
            self.logger.error(f"Error actualizando indicadores: {e}")
    
    def _update_status(self, status: str, icon: str):
        """
        Actualiza el estado mostrado en la interfaz.
        
        Args:
            status: Texto del estado
            icon: Icono del estado
        """
        self.status_label.config(text=f"{icon} {status}")
    
    def _censor_credentials(self, username: str, password: str) -> tuple:
        """
        Censura las credenciales para mostrar en la UI.
        
        Args:
            username: Nombre de usuario
            password: Contrase√±a
            
        Returns:
            Tupla con (username_censurado, password_censurado)
        """
        # Censurar username (mostrar solo primeros 2 caracteres)
        if len(username) <= 2:
            censored_username = username
        else:
            censored_username = username[:2] + "*" * (len(username) - 2)
        
        # Censurar password completamente
        censored_password = "*" * len(password) if password else ""
        
        return censored_username, censored_password
    
    def _get_connection_url(self) -> str:
        """
        Obtiene la URL de conexi√≥n actual (censurada).
        
        Returns:
            URL de conexi√≥n censurada
        """
        if not self.connection or not self.is_streaming:
            return "No conectado"
        
        try:
            # Obtener informaci√≥n b√°sica
            ip = self.camera_config.get('ip', 'N/A')
            username = self.camera_config.get('username', 'admin')
            password = self.camera_config.get('password', '')
            connection_type = self.camera_config.get('type', 'onvif')
            
            # Censurar credenciales
            censored_username, censored_password = self._censor_credentials(username, password)
            
            # Construir URL seg√∫n el tipo de conexi√≥n
            if connection_type.lower() == 'rtsp':
                rtsp_port = self.camera_config.get('rtsp_port', 554)
                if hasattr(self.connection, 'stream_url') and self.connection.stream_url:
                    # Usar URL real pero censurar credenciales
                    url = self.connection.stream_url
                    # Reemplazar credenciales reales con censuradas
                    if username in url and password in url:
                        url = url.replace(f"{username}:{password}", f"{censored_username}:{censored_password}")
                    return url
                else:
                    return f"rtsp://{censored_username}:{censored_password}@{ip}:{rtsp_port}/stream"
            
            elif connection_type.lower() == 'onvif':
                onvif_port = self.camera_config.get('onvif_port', 80)
                if hasattr(self.connection, 'stream_url') and self.connection.stream_url:
                    # ONVIF devuelve URL RTSP, censurar credenciales
                    url = self.connection.stream_url
                    if username in url and password in url:
                        url = url.replace(f"{username}:{password}", f"{censored_username}:{censored_password}")
                    return f"ONVIF:{onvif_port} -> {url}"
                else:
                    return f"ONVIF://{ip}:{onvif_port} (configurando...)"
            
            elif connection_type.lower() == 'amcrest':
                http_port = self.camera_config.get('http_port', 80)
                return f"HTTP://{censored_username}:{censored_password}@{ip}:{http_port}/cgi-bin/"
            
            else:
                return f"{connection_type.upper()}://{ip} (configurando...)"
                
        except Exception as e:
            self.logger.error(f"Error obteniendo URL de conexi√≥n: {str(e)}")
            return "Error obteniendo URL"
    
    def _update_connection_url(self):
        """
        Actualiza la URL de conexi√≥n mostrada en la interfaz.
        """
        url = self._get_connection_url()
        self.url_label.config(text=f"üîó {url}")
    
    def _clear_video_canvas(self, state: str = "initial"):
        """
        Limpia el canvas de video y muestra un mensaje seg√∫n el estado.
        
        Args:
            state: Estado actual (initial, error, disconnected, stream_error)
        """
        try:
            # Limpiar canvas
            self.video_canvas.delete("all")
            
            # Configurar mensaje y color seg√∫n el estado
            if state == "initial":
                message = "üé• Visor Universal de C√°maras\n\nüìπ Presiona 'Conectar' para iniciar\n\nüí° Click: Capturar\nüí° Doble-click: Pantalla completa"
                color = "#ecf0f1"
                bg_color = "#2c3e50"
            elif state == "error":
                message = "‚ùå Error de Conexi√≥n\n\nüîß Verifica:\n‚Ä¢ Direcci√≥n IP\n‚Ä¢ Credenciales\n‚Ä¢ Red\n\nüîÑ Presiona 'Refrescar' para reintentar"
                color = "#e74c3c"
                bg_color = "#2c3e50"
            elif state == "disconnected":
                message = "üîå Desconectado\n\n‚úÖ Desconexi√≥n exitosa\n\nüîó Presiona 'Conectar' para reconectar"
                color = "#f39c12"
                bg_color = "#2c3e50"
            elif state == "stream_error":
                message = "üì° Error de Stream\n\n‚ö†Ô∏è Problema en la transmisi√≥n\n\nüîÑ Reconectando autom√°ticamente..."
                color = "#e67e22"
                bg_color = "#2c3e50"
            else:
                message = "üìπ C√°mara Lista\n\nEsperando conexi√≥n..."
                color = "#95a5a6"
                bg_color = "#2c3e50"
            
            # Cambiar color de fondo del canvas
            self.video_canvas.config(bg=bg_color)
            
            # Obtener dimensiones del canvas
            canvas_width = self.video_canvas.winfo_width()
            canvas_height = self.video_canvas.winfo_height()
            
            if canvas_width <= 1 or canvas_height <= 1:
                canvas_width = 320
                canvas_height = 240
            
            # Crear texto centrado
            self.video_canvas.create_text(
                canvas_width // 2,
                canvas_height // 2,
                text=message,
                fill=color,
                font=("Arial", 11, "bold"),
                justify=tk.CENTER
            )
            
            # Agregar marca de agua en la esquina
            brand_text = f"{self.camera_config.get('brand', 'GENERIC').upper()}"
            self.video_canvas.create_text(
                canvas_width - 10,
                canvas_height - 10,
                text=brand_text,
                fill="#7f8c8d",
                font=("Arial", 8),
                anchor=tk.SE
            )
            
        except Exception as e:
            self.logger.error(f"Error limpiando canvas: {str(e)}")
    
    def _take_snapshot(self):
        """
        Captura un snapshot de la c√°mara.
        """
        if not self.is_streaming or not self.connection:
            messagebox.showwarning("Advertencia", "La c√°mara debe estar conectada para capturar snapshots")
            return
        
        try:
            # Usar el frame actual si est√° disponible
            if self.current_frame is not None:
                # Generar nombre de archivo con timestamp
                timestamp = time.strftime("%Y%m%d_%H%M%S")
                camera_name = self.camera_config.get('name', 'camera').replace(' ', '_')
                filename = f"snapshot_{camera_name}_{timestamp}.jpg"
                
                # Guardar imagen
                cv2.imwrite(filename, self.current_frame)
                
                # Mostrar confirmaci√≥n
                messagebox.showinfo(
                    "üì∏ Snapshot Capturado", 
                    f"‚úÖ Snapshot guardado exitosamente:\n\nüìÅ {filename}\n\nüì∫ Resoluci√≥n: {self._get_resolution()}"
                )
                
                self.logger.info(f"Snapshot capturado: {filename}")
            else:
                # Intentar capturar directamente de la conexi√≥n
                if hasattr(self.connection, 'capture_snapshot'):
                    timestamp = time.strftime("%Y%m%d_%H%M%S")
                    camera_name = self.camera_config.get('name', 'camera').replace(' ', '_')
                    filename = f"snapshot_{camera_name}_{timestamp}.jpg"
                    
                    if self.connection.capture_snapshot(filename):
                        messagebox.showinfo("üì∏ Snapshot Capturado", f"‚úÖ Snapshot guardado: {filename}")
                        self.logger.info(f"Snapshot capturado via conexi√≥n: {filename}")
                    else:
                        messagebox.showerror("Error", "‚ùå No se pudo capturar el snapshot")
                else:
                    messagebox.showerror("Error", "‚ùå No hay frame disponible para capturar")
                    
        except Exception as e:
            self.logger.error(f"Error capturando snapshot: {str(e)}")
            messagebox.showerror("Error", f"‚ùå Error al capturar snapshot:\n{str(e)}")
    
    def connect(self):
        """M√©todo p√∫blico para conectar la c√°mara."""
        if not self.is_streaming:
            self._connect()
    
    def disconnect(self):
        """M√©todo p√∫blico para desconectar la c√°mara."""
        if self.is_streaming:
            self._disconnect()
    
    def refresh(self):
        """M√©todo p√∫blico para refrescar la conexi√≥n."""
        self._refresh_connection()
    
    def capture_snapshot(self):
        """M√©todo p√∫blico para capturar snapshot."""
        self._take_snapshot()
    
    def cleanup(self):
        """
        Limpia recursos del widget.
        """
        try:
            self.logger.info("Limpiando recursos del widget de c√°mara")
            
            # Detener streaming
            if self.is_streaming:
                self._disconnect()
            
            # Limpiar canvas
            if hasattr(self, 'video_canvas'):
                self.video_canvas.delete("all")
            
            # Limpiar frame principal
            if hasattr(self, 'main_frame'):
                self.main_frame.destroy()
            
            self.logger.info("Recursos del widget limpiados correctamente")
            
        except Exception as e:
            self.logger.error(f"Error limpiando recursos del widget: {str(e)}")
    
    def grid(self, **kwargs):
        """M√©todo para posicionar el widget usando grid."""
        if hasattr(self, 'main_frame'):
            self.main_frame.grid(**kwargs)
    
    def pack(self, **kwargs):
        """M√©todo para posicionar el widget usando pack."""
        if hasattr(self, 'main_frame'):
            self.main_frame.pack(**kwargs) 